using System;
using System.Linq;
using System.Collections.Generic;
using System.IO;
using NXOpen;
using NXOpen.BlockStyler;
using NXOpen.Utilities;
using NXOpenUI;
using NXOpen.UF;

namespace ZCZ
{
   //==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  E:\fangzheng\application\ZCZ.cs
//
//        This file was generated by the NX Block UI Styler
//        Created by: HS
//              Version: NX 8
//              Date: 01-08-2018  (Format: mm-dd-yyyy)
//              Time: 22:14 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C# source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These imports are needed for the following template code
//------------------------------------------------------------------------------

    //------------------------------------------------------------------------------
    //Represents Block Styler application class
    //------------------------------------------------------------------------------
    //==============================================================================
    //   WARNING!!  This file is overwritten by the UIStyler each time the Styler
    //   file is saved.
    //
    //       Filename:  Supportpillars.cs
    //
    //        This file was generated by the NX User Interface Styler
    //        Created by: HS
    //        Version: NX 8
    //              Date: 02-18-2018
    //              Time: 16:26
    //
    //   This template file is overwritten each time the UIStyler dialog is
    //   saved.  Any modifications to this file will be lost.
    //==============================================================================


    //==============================================================================
    //  Purpose:  This TEMPLATE file contains C#.NET source to guide you in the
    //  construction of your NX Open application dialog. The generation of your
    //  dialog file (.dlg extension) is the first step towards dialog construction
    //  within NX.  You must now create a NX Open application that
    //  utilizes this file (.dlg).


    //  The information in this file provides you with the following:
    //
    //  1.  Help on how to load and display your UIStyler dialog in NX
    //      using APIs provided in NXOpen.UIStyler namespace
    //  2.  The empty callback methods (stubs) associated with your dialog items
    //      have also been placed in this file. These empty methods have been
    //      created simply to start you along with your coding requirements.
    //      The method name, argument list and possible return values have already
    //      been provided for you.
    //==============================================================================


    //------------------------------------------------------------------------------
    // These imports are needed for the following template code
    //------------------------------------------------------------------------------
    using System;
    using NXOpen;
    using NXOpen.UIStyler;


    //------------------------------------------------------------------------------
    // Represents UI Styler application class
    //------------------------------------------------------------------------------
    public class Supportpillars
    {
        // class members
        private static Session theSession;
        private static UI theUI;
        public static Supportpillars theSupportpillars;
        private Dialog theDialog;
        private static UFSession theufsession;
        private static UFObj ufobj = null;
        private static UFModl ufmodel = null;
        private static UFAttr ufattr = null;
        private static UFDisp ufdisp = null;
        private static UFLayer uflayer = null;
        private static Part workpart = null;
        private static UFUi ufui = null;
        private static UFCurve ufcurve = null;
        private static Vector3d vector_x = new Vector3d(1,0,0);
        private static Vector3d vector_y = new Vector3d(0,1,0);
        private static Vector3d vector_z = new Vector3d(0, 0,1);
        private static Point3d origin_point = new Point3d(0, 0, 0);
        private static Arc arc = null;


        private NXOpen.UIStyler.DialogItem supportPillarDialog;
        private NXOpen.UIStyler.BitMap supportPillarBitmap1;
        private NXOpen.UIStyler.StringItem supportPillarStrDiam;
        private NXOpen.UIStyler.StringItem supportPillarStrAvoidDiam;
        private NXOpen.UIStyler.Separator supportPillarSep1;
        private NXOpen.UIStyler.RadioBox supportPillarRadioPosType;
        private NXOpen.UIStyler.GroupBox supportPillarGrBeg1;
        private NXOpen.UIStyler.RealItem supportPillarRealXCoord;
        private NXOpen.UIStyler.RealItem supportPillarRealYCoord;
        private NXOpen.UIStyler.OptionMenu supportPillarOptionSupplier;
        private NXOpen.UIStyler.StringItem supportPillarStrMaterial;
        private NXOpen.UIStyler.StringItem supportPillarStrHeatTrteatment;
        private NXOpen.UIStyler.OptionMenu supportPillarOptionPrecision;
        private NXOpen.UIStyler.Toggle supportPillarToggleColor;
        private NXOpen.UIStyler.ColorTool supportPillarCtolColor;
        private NXOpen.UIStyler.Toggle supportPillarToggleLayer;
        private NXOpen.UIStyler.IntegerItem supportPillarIntLayer;
        private NXOpen.UIStyler.Toggle supportPillarToggleSafeDis;
        private NXOpen.UIStyler.OptionMenu supportPillarOptionSafeDis;
        private NXOpen.UIStyler.Toggle supportPillarToggleSetPlateTransp;
        private NXOpen.UIStyler.IntegerItem supportPillarIntSetPlateTransp;
        private NXOpen.UIStyler.Toggle supportPillarToggleAutoSubtract;
        private NXOpen.UIStyler.RadioBox supportPillarRadioScrewStandard;
        private NXOpen.UIStyler.GroupBox supportPillarGrBeg2;
        private NXOpen.UIStyler.OptionMenu supportPillarOptionScrewSize;
        private NXOpen.UIStyler.OptionMenu supportPillarOptionScrewSupplier;
        private NXOpen.UIStyler.Toggle supportPillarToggleScrewColor;
        private NXOpen.UIStyler.ColorTool supportPillarCtolScrewColor;
        private NXOpen.UIStyler.GroupBox supportPillarGrBeg3;
        private NXOpen.UIStyler.ButtonLayout supportPillarBloNum;
        private NXOpen.UIStyler.IntegerItem supportPillarIntXNum;
        private NXOpen.UIStyler.IntegerItem supportPillarIntYNum;
        private NXOpen.UIStyler.PushButton supportPillarActionOpenConfig;
        private NXOpen.UIStyler.PushButton supportPillarActionUpdate;
        public static bool isDisposeCalled;


        #region " UI Styler Dialog Designer generator code " 
        //------------------------------------------------------------------------------
        // Constructor for NX Styler class
        //------------------------------------------------------------------------------
        public Supportpillars()
        {
            try
            {
                theSession = Session.GetSession();
                theUI = UI.GetUI();
                workpart = theSession.Parts.Work;
                theufsession = UFSession.GetUFSession();
                ufobj = theufsession.Obj;
                ufmodel = theufsession.Modl;
                ufattr = theufsession.Attr;
                ufdisp = theufsession.Disp;
                uflayer = theufsession.Layer;
                ufui = theufsession.Ui;
                ufcurve = theufsession.Curve;

                theDialog = theUI.Styler.CreateStylerDialog("supportpillars.dlg");
                InitializeUIStylerDialog();
                isDisposeCalled = false;

            }
            catch (NXOpen.NXException ex)
            {
                // ---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
            }
        }

        //------------------------------------------------------------------------------
        // This method is required for UI styler dialog creation
        //------------------------------------------------------------------------------
        private void InitializeUIStylerDialog()
        {
            try
            {
                //------------------------------------------------------------------------------
                // The following code snippets initializes all the styler items and associate
                // respective callbacks. Attributes of the styler item can be accessed and
                // modified only after calling Show() or RegisterWithUiMenu().
                //------------------------------------------------------------------------------
                supportPillarDialog = (NXOpen.UIStyler.DialogItem)theDialog.GetStylerItem("UF_STYLER_DIALOG_INDEX", Dialog.ItemType.DialogItem);
                supportPillarDialog.AddConstructHandler(new NXOpen.UIStyler.DialogItem.Construct(initialize_cb), false);
                supportPillarDialog.AddDestructHandler(new NXOpen.UIStyler.DialogItem.Destruct(destory_cb), false);
                supportPillarBitmap1 = (NXOpen.UIStyler.BitMap)theDialog.GetStylerItem("BITMAP_1", Dialog.ItemType.Bitmap);
                supportPillarStrDiam = (NXOpen.UIStyler.StringItem)theDialog.GetStylerItem("STR_DIAM", Dialog.ItemType.StringItem);
                supportPillarStrAvoidDiam = (NXOpen.UIStyler.StringItem)theDialog.GetStylerItem("STR_AVOID_DIAM", Dialog.ItemType.StringItem);
                supportPillarSep1 = (NXOpen.UIStyler.Separator)theDialog.GetStylerItem("SEP_1", Dialog.ItemType.Separator);
                supportPillarRadioPosType = (NXOpen.UIStyler.RadioBox)theDialog.GetStylerItem("RADIO_POS_TYPE", Dialog.ItemType.RadioBox);
                supportPillarRadioPosType.AddValueChangedHandler(new NXOpen.UIStyler.RadioBox.ValueChanged(radio_pos_type_cb), false);
                supportPillarGrBeg1 = (NXOpen.UIStyler.GroupBox)theDialog.GetStylerItem("GR_BEG_1", Dialog.ItemType.GroupBox);
                supportPillarRealXCoord = (NXOpen.UIStyler.RealItem)theDialog.GetStylerItem("REAL_X_COORD", Dialog.ItemType.RealItem);
                supportPillarRealXCoord.AddActivateHandler(new NXOpen.UIStyler.RealItem.Activate(action_button_update_act_cb), true);
                supportPillarRealYCoord = (NXOpen.UIStyler.RealItem)theDialog.GetStylerItem("REAL_Y_COORD", Dialog.ItemType.RealItem);
                supportPillarRealYCoord.AddActivateHandler(new NXOpen.UIStyler.RealItem.Activate(action_button_update_act_cb), true);
                supportPillarOptionSupplier = (NXOpen.UIStyler.OptionMenu)theDialog.GetStylerItem("OPTION_SUPPLIER", Dialog.ItemType.OptionMenu);
                supportPillarOptionSupplier.AddActivateHandler(new NXOpen.UIStyler.OptionMenu.Activate(option_supplier_cb), true);
                supportPillarStrMaterial = (NXOpen.UIStyler.StringItem)theDialog.GetStylerItem("STR_MATERIAL", Dialog.ItemType.StringItem);
                supportPillarStrHeatTrteatment = (NXOpen.UIStyler.StringItem)theDialog.GetStylerItem("STR_HEAT_TRTEATMENT", Dialog.ItemType.StringItem);
                supportPillarOptionPrecision = (NXOpen.UIStyler.OptionMenu)theDialog.GetStylerItem("OPTION_PRECISION", Dialog.ItemType.OptionMenu);
                supportPillarToggleColor = (NXOpen.UIStyler.Toggle)theDialog.GetStylerItem("TOGGLE_COLOR", Dialog.ItemType.Toggle);
                supportPillarToggleColor.AddValueChangedHandler(new NXOpen.UIStyler.Toggle.ValueChanged(check_color_cb), false);
                supportPillarCtolColor = (NXOpen.UIStyler.ColorTool)theDialog.GetStylerItem("CTOL_COLOR", Dialog.ItemType.ColorTool);
                supportPillarCtolColor.AddValueChangedHandler(new NXOpen.UIStyler.ColorTool.ValueChanged(ctol_set_color_cb), false);
                supportPillarToggleLayer = (NXOpen.UIStyler.Toggle)theDialog.GetStylerItem("TOGGLE_LAYER", Dialog.ItemType.Toggle);
                supportPillarToggleLayer.AddValueChangedHandler(new NXOpen.UIStyler.Toggle.ValueChanged(check_layer_cb), false);
                supportPillarIntLayer = (NXOpen.UIStyler.IntegerItem)theDialog.GetStylerItem("INT_LAYER", Dialog.ItemType.IntegerItem);
                supportPillarToggleSafeDis = (NXOpen.UIStyler.Toggle)theDialog.GetStylerItem("TOGGLE_SAFE_DIS", Dialog.ItemType.Toggle);
                supportPillarToggleSafeDis.AddValueChangedHandler(new NXOpen.UIStyler.Toggle.ValueChanged(check_safe_dis_cb), false);
                supportPillarOptionSafeDis = (NXOpen.UIStyler.OptionMenu)theDialog.GetStylerItem("OPTION_SAFE_DIS", Dialog.ItemType.OptionMenu);
                supportPillarToggleSetPlateTransp = (NXOpen.UIStyler.Toggle)theDialog.GetStylerItem("TOGGLE_SET_PLATE_TRANSP", Dialog.ItemType.Toggle);
                supportPillarToggleSetPlateTransp.AddValueChangedHandler(new NXOpen.UIStyler.Toggle.ValueChanged(check_set_plate_transp_cb), false);
                supportPillarIntSetPlateTransp = (NXOpen.UIStyler.IntegerItem)theDialog.GetStylerItem("INT_SET_PLATE_TRANSP", Dialog.ItemType.IntegerItem);
                supportPillarIntSetPlateTransp.AddActivateHandler(new NXOpen.UIStyler.IntegerItem.Activate(int_set_plate_transp_cb), true);
                supportPillarToggleAutoSubtract = (NXOpen.UIStyler.Toggle)theDialog.GetStylerItem("TOGGLE_AUTO_SUBTRACT", Dialog.ItemType.Toggle);
                supportPillarRadioScrewStandard = (NXOpen.UIStyler.RadioBox)theDialog.GetStylerItem("RADIO_SCREW_STANDARD", Dialog.ItemType.RadioBox);
                supportPillarRadioScrewStandard.AddValueChangedHandler(new NXOpen.UIStyler.RadioBox.ValueChanged(radio_screw_type_cb), false);
                supportPillarGrBeg2 = (NXOpen.UIStyler.GroupBox)theDialog.GetStylerItem("GR_BEG_2", Dialog.ItemType.GroupBox);
                supportPillarOptionScrewSize = (NXOpen.UIStyler.OptionMenu)theDialog.GetStylerItem("OPTION_SCREW_SIZE", Dialog.ItemType.OptionMenu);
                supportPillarOptionScrewSupplier = (NXOpen.UIStyler.OptionMenu)theDialog.GetStylerItem("OPTION_SCREW_SUPPLIER", Dialog.ItemType.OptionMenu);
                supportPillarToggleScrewColor = (NXOpen.UIStyler.Toggle)theDialog.GetStylerItem("TOGGLE_SCREW_COLOR", Dialog.ItemType.Toggle);
                supportPillarToggleScrewColor.AddValueChangedHandler(new NXOpen.UIStyler.Toggle.ValueChanged(check_screw_color_cb), false);
                supportPillarCtolScrewColor = (NXOpen.UIStyler.ColorTool)theDialog.GetStylerItem("CTOL_SCREW_COLOR", Dialog.ItemType.ColorTool);
                supportPillarCtolScrewColor.AddValueChangedHandler(new NXOpen.UIStyler.ColorTool.ValueChanged(ctol_set_screw_color_cb), false);
                supportPillarGrBeg3 = (NXOpen.UIStyler.GroupBox)theDialog.GetStylerItem("GR_BEG_3", Dialog.ItemType.GroupBox);
                supportPillarBloNum = (NXOpen.UIStyler.ButtonLayout)theDialog.GetStylerItem("BLO_NUM", Dialog.ItemType.ButtonLayout);
                supportPillarBloNum.AddActivateHandler(new NXOpen.UIStyler.ButtonLayout.Activate(blo_num_act_cb), true);
                supportPillarIntXNum = (NXOpen.UIStyler.IntegerItem)theDialog.GetStylerItem("INT_X_NUM", Dialog.ItemType.IntegerItem);
                supportPillarIntYNum = (NXOpen.UIStyler.IntegerItem)theDialog.GetStylerItem("INT_Y_NUM", Dialog.ItemType.IntegerItem);
                supportPillarActionOpenConfig = (NXOpen.UIStyler.PushButton)theDialog.GetStylerItem("ACTION_OPEN_CONFIG", Dialog.ItemType.PushButton);
                supportPillarActionOpenConfig.AddActivateHandler(new NXOpen.UIStyler.PushButton.Activate(action_open_config_act_cb), true);
                supportPillarActionUpdate = (NXOpen.UIStyler.PushButton)theDialog.GetStylerItem("ACTION_UPDATE", Dialog.ItemType.PushButton);
                supportPillarActionUpdate.AddActivateHandler(new NXOpen.UIStyler.PushButton.Activate(action_button_update_act_cb), true);
            }
            catch (NXOpen.NXException ex)
            {
                // ---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
            }
        }

        #endregion

        // -------------------------- MENUBAR HOOKUP HELP Example ----------------------
        // To launch this dialog from a NX menubar, you must follow the steps below:


        //      1)Add the following lines to your MenuScript file in order to
        //        associate a menu bar button with your dialog.  In this
        //        example, a cascade menu will be created and will be
        //        located just before the Help button on the main menubar.
        //        The button, SUPPORTPILLARS_BTN is set up to launch your dialog and
        //        will be positioned as the first button on your pulldown menu.
        //        If you wish to add the button to an existing cascade, simply
        //        add the 3 lines between MENU LAUNCH_CASCADE and END_OF_MENU
        //        to your menuscript file.

        //        The MenuScript file requires an extension of ".men".
        //        Make sure that you add the extension to the file and place
        //        the file in your startup directory:
        //             $UGII_USER_DIR/startup or
        //             $UGII_SITE_DIR/startup or
        //             $UGII_VENDOR_DIR/startup directory

        //        Move the contents between the dashed lines to your Menuscript file.
        //        !-----------------------------------------------------------------------------
        //        VERSION 120
        // 
        //        EDIT UG_GATEWAY_MAIN_MENUBAR
        // 
        //        BEFORE UG_HELP
        //        CASCADE_BUTTON UISTYLER_DLG_CASCADE_BTN
        //        LABEL Dialog Launcher
        //        END_OF_BEFORE
        // 
        //        MENU UISTYLER_DLG_CASCADE_BTN
        //        BUTTON SUPPORTPILLARS_BTN
        //        LABEL Display Supportpillars dialog
        //        ACTIONS supportpillars.dlg
        //        END_OF_MENU
        //        !-----------------------------------------------------------------------------

        //      2)Issue a call to the function, RegisterWithUiMenu() from the Startup()
        //        as shown below.
        //        To use this call, remove the conditional definitions:
        //             #if MENUBAR_COMMENTED_OUT
        //             #endif

        //      3)Place your compiled and linked DLL in 
        //             $UGII_USER_DIR/startup or
        //             $UGII_SITE_DIR/startup or
        //             $UGII_VENDOR_DIR/startup directory.

        //       NOTE:  The shared libraries must contain the proper extension .dll
        //       to make ensure that it is recognized by the MenuScript.  If it does not
        //       have the proper extension, it will NOT be recognized by MenuScript.

        //       The action name you have provided in your MenuScript must correspond to
        //       to the dialog name provided in the action structure.  This MUST match inorder
        //       to bind your dlg file to your MenuScript button.

        //      4)Copy your UIStyler dialog file to the proper directory.
        //        All dialog files (.dlg) must be located in 
        //             $UGII_USER_DIR/application or
        //             $UGII_SITE_DIR/application or
        //             $UGII_VENDOR_DIR/application directory
        //------------------------------------------------------------------------------
#if MENUBAR_COMMENTED_OUT
    public static int Startup()
    {
        int retValue = 0;
        try
        {
            theSupportpillars = new Supportpillars();
            // The following method registers the dialog with a menu item
            theSupportpillars.RegisterWithUiMenu();

            retValue = 0;
        }
        catch (NXOpen.NXException ex)
        {
            // ---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
        }
        return retValue;
    } // Startup ends

    //------------------------------------------------------------------------------
    // The flag "isTopDialog", informs menubar about the dialog location.
    // This flag MUST match the resource set in the dialog.
    // DO NOT ASSUME that changing this field will update the location of the dialog.
    // Please use the UIStyler to indicate the position of the dialog.
    //------------------------------------------------------------------------------
    public void RegisterWithUiMenu()
    {
        try
        {
            bool isTopDialog = false;
            theDialog.RegisterWithUiMenu(isTopDialog);
        }
        catch (NXOpen.NXException ex)
        {
            // ---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
        }
    }


#endif // MENUBAR_COMMENTED_OUT


        // --------------- DIALOG CREATION FROM A CALLBACK HELP Example -----------------
        // If you wish to have this dialog displayed from the callback of another
        // UIStyler dialog, you should:


        //      1)Make sure that the callback of your UIStyler dialog is
        //        designated as a dialog building callback.
        //      2)Remove the conditional definitions:
        //             #if DISPLAY_FROM_CALLBACK
        //             #endif

        //      3)Your callback should issue a call to this method.


        // All dialog files must be located in
        //             $UGII_USER_DIR/application or
        //             $UGII_SITE_DIR/application or
        //             $UGII_VENDOR_DIR/application directory
        //------------------------------------------------------------------------------
#if DISPLAY_FROM_CALLBACK
    public static void <enter the name of your function>(ref NXOpen.UIStyler.DialogResponse response)
    {
        try
        {
            theSupportpillars = new Supportpillars();
            // The following method shows the dialog immediately
            response = theSupportpillars.Show();
            theSupportpillars.Dispose();
        }
        catch (NXOpen.NXException ex)
        {
            // ---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
        }
    }

#endif // DISPLAY_FROM_CALLBACK


        //---------------- DIALOG CREATION FROM A USER EXIT HELP Example ---------------
        // An example is shown below to create this dialog from a user exit.
        // All dialog files must be located in
        //             $UGII_USER_DIR/application or
        //             $UGII_SITE_DIR/application or
        //             $UGII_VENDOR_DIR/application directory


        //      1)Remove the conditional definitions:
        //             #if DISPLAY_FROM_USER_EXIT
        //             #endif

        //      2)Add a user exit to the method name below, for example, Main().
        //      3)Consider how your shared library will be unloaded.  Take a look
        //        at the method GetUnloadOption().
        //------------------------------------------------------------------------------

        public static void Main()
        {
            try
            {
                NXOpen.UIStyler.DialogResponse response;
                theSupportpillars = new Supportpillars();
                // The following method shows the dialog immediately
                response = theSupportpillars.Show();
                theSupportpillars.Dispose();
            }
            catch (NXOpen.NXException ex)
            {
                // ---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
            }
        } // User exit ends

        //------------------------------------------------------------------------------
        // This method specifies how a shared image is unloaded from memory
        // within NX. This method gives you the capability to unload an
        // internal NX Open application or user  exit from NX. Specify any
        // one of the three constants as a return value to determine the type
        // of unload to perform:


        //    Immediately : unload the library as soon as the automation program has completed
        //    Explicitly  : unload the library from the "Unload Shared Image" dialog
        //    AtTermination : unload the library when the NX session terminates


        // NOTE:  A program which associates NX Open applications with the menubar
        // MUST NOT use this option since it will UNLOAD your NX Open application image
        // from the menubar.
        //------------------------------------------------------------------------------
        public static int GetUnloadOption(string arg)
        {
            // Return code to indicate this library can be unloaded
            // by the user.
            return System.Convert.ToInt32(Session.LibraryUnloadOption.Explicitly);
            // return System.Convert.ToInt32(Session.LibraryUnloadOption.Immediately);
            // return System.Convert.ToInt32(Session.LibraryUnloadOption.AtTermination);
        }

        //------------------------------------------------------------------------------
        // Following method cleanup any housekeeping chores that may be needed.
        // This method is automatically called by NX.
        //------------------------------------------------------------------------------
        public static int UnloadLibrary(string arg)
        {
            try
            {
                if (theSupportpillars == null)
                {
                    theSupportpillars.Dispose();
                }
            }
            catch (NXOpen.NXException ex)
            {
                // ---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
            }
            return 0;
        }




        //------------------------------------------------------------------------------
        // This method shows the dialog on the screen
        //------------------------------------------------------------------------------
        public NXOpen.UIStyler.DialogResponse Show()
        {
            NXOpen.UIStyler.DialogResponse retValue = NXOpen.UIStyler.DialogResponse.Ok;
            try
            {
                retValue = theDialog.Show();
            }
            catch (NXOpen.NXException ex)
            {
                // ---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
            }
            return retValue;
        }


        //------------------------------------------------------------------------------
        // Following method disposes all the class members
        //------------------------------------------------------------------------------
        public void Dispose()
        {
            try
            {
                if (isDisposeCalled == false)
                {
                    supportPillarDialog.Dispose();
                    supportPillarBitmap1.Dispose();
                    supportPillarStrDiam.Dispose();
                    supportPillarStrAvoidDiam.Dispose();
                    supportPillarSep1.Dispose();
                    supportPillarRadioPosType.Dispose();
                    supportPillarGrBeg1.Dispose();
                    supportPillarRealXCoord.Dispose();
                    supportPillarRealYCoord.Dispose();
                    supportPillarOptionSupplier.Dispose();
                    supportPillarStrMaterial.Dispose();
                    supportPillarStrHeatTrteatment.Dispose();
                    supportPillarOptionPrecision.Dispose();
                    supportPillarToggleColor.Dispose();
                    supportPillarCtolColor.Dispose();
                    supportPillarToggleLayer.Dispose();
                    supportPillarIntLayer.Dispose();
                    supportPillarToggleSafeDis.Dispose();
                    supportPillarOptionSafeDis.Dispose();
                    supportPillarToggleSetPlateTransp.Dispose();
                    supportPillarIntSetPlateTransp.Dispose();
                    supportPillarToggleAutoSubtract.Dispose();
                    supportPillarRadioScrewStandard.Dispose();
                    supportPillarGrBeg2.Dispose();
                    supportPillarOptionScrewSize.Dispose();
                    supportPillarOptionScrewSupplier.Dispose();
                    supportPillarToggleScrewColor.Dispose();
                    supportPillarCtolScrewColor.Dispose();
                    supportPillarGrBeg3.Dispose();
                    supportPillarBloNum.Dispose();
                    supportPillarIntXNum.Dispose();
                    supportPillarIntYNum.Dispose();
                    supportPillarActionOpenConfig.Dispose();
                    supportPillarActionUpdate.Dispose();
                    theDialog.Dispose();
                }
                isDisposeCalled = true;
            }
            catch (NXOpen.NXException ex)
            {
                // ---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
            }
        }

        //------------------------------------------------------------------------------
        //------------------------- UIStyler Callback Functions ------------------------
        //------------------------------------------------------------------------------


        //------------------------------------------------------------------------------
        // Callback Name: initialize_cb
        // Following callback is associated with the "supportPillarDialog" Styler item.
        // Input: eventObject - object of UIStyler.StylerEvent class
        //------------------------------------------------------------------------------
        public NXOpen.UIStyler.DialogState initialize_cb(NXOpen.UIStyler.StylerEvent eventObject)
        {
            try
            {
                List<Tag> list = new List<Tag>();
                Tag[] list_body = new Tag[3];
                Tag Next_tag=Tag.Null;
                string attr_string=string.Empty;
                ufobj.CycleObjsInPart(workpart.Tag,UFConstants.UF_solid_type, ref Next_tag);

                while(Next_tag!=Tag.Null)
                {
                   if (Next_tag == Tag.Null) break;
                   int t, subType;
                   ufobj.AskTypeAndSubtype(Next_tag, out t, out subType);
                   if (subType == 0/*UF_solid_body_subtype*/)
                   {
                        list.Add(Next_tag);
                   }
                   ufobj.CycleObjsInPart(workpart.Tag, UFConstants.UF_solid_type, ref Next_tag);
            }
                for (int i=0;i<list.Count;i++)
                {
                    Tag[] feature_tag;
                    ufmodel.AskBodyFeats(list[i], out feature_tag);
                    NXOpen.Features.Feature feature_body;
                    feature_body = NXObjectManager.Get(feature_tag[0]) as NXOpen.Features.Feature;
                    attr_string = feature_body.GetStringAttribute("名称");
                    if(attr_string=="底板")
                    {
                        list_body[0] = list[i];
                        ufdisp.SetHighlight(list_body[0],1);
                    }
                }
                // ---- Enter your callback code here -----
           

            }
            catch (NXOpen.NXException ex)
            {
                // ---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
            }
            // Callback acknowledged, do not terminate dialog
            // A return value of NXOpen.UIStyler.DialogState.ExitDialog will not be accepted
            // for this callback type. You must continue dialog construction.
            return NXOpen.UIStyler.DialogState.ContinueDialog;
        }
        //------------------------------------------------------------------------------
        // Callback Name: destory_cb
        // Following callback is associated with the "supportPillarDialog" Styler item.
        // Input: eventObject - object of UIStyler.StylerEvent class
        //------------------------------------------------------------------------------
        public NXOpen.UIStyler.DialogState destory_cb(NXOpen.UIStyler.StylerEvent eventObject)
        {
            try
            {


                // ---- Enter your callback code here -----


            }
            catch (NXOpen.NXException ex)
            {
                // ---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
            }
            // Callback acknowledged, do not terminate dialog
            // A return value of NXOpen.UIStyler.DialogState.ExitDialog will not be accepted
            // for this callback type. You must continue dialog destruction.
            return NXOpen.UIStyler.DialogState.ContinueDialog;
        }

        //------------------------------------------------------------------------------
        // Callback Name: radio_pos_type_cb
        // Following callback is associated with the "supportPillarRadioPosType" Styler item.
        // Input: eventObject - object of UIStyler.StylerEvent class
        //------------------------------------------------------------------------------
        public NXOpen.UIStyler.DialogState radio_pos_type_cb(NXOpen.UIStyler.StylerEvent eventObject)
        {
            try
            {


                // ---- Enter your callback code here -----


            }
            catch (NXOpen.NXException ex)
            {
                // ---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
            }
            // Callback acknowledged, do not terminate dialog
            return NXOpen.UIStyler.DialogState.ContinueDialog;
            // or Callback acknowledged, terminate dialog.
            // return NXOpen.UIStyler.DialogState.ExitDialog;
        }

        //------------------------------------------------------------------------------
        // Callback Name: action_button_update_act_cb
        // Following callback is associated with the "supportPillarRealXCoord" Styler item.
        // Input: eventObject - object of UIStyler.StylerEvent class
        //------------------------------------------------------------------------------
        public NXOpen.UIStyler.DialogState action_button_update_act_cb(NXOpen.UIStyler.StylerEvent eventObject)
        {
            try
            {


                // ---- Enter your callback code here -----


            }
            catch (NXOpen.NXException ex)
            {
                // ---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
            }
            // Callback acknowledged, do not terminate dialog
            return NXOpen.UIStyler.DialogState.ContinueDialog;
            // or Callback acknowledged, terminate dialog.
            // return NXOpen.UIStyler.DialogState.ExitDialog;
        }

        //------------------------------------------------------------------------------
        // Callback Name: option_supplier_cb
        // Following callback is associated with the "supportPillarOptionSupplier" Styler item.
        // Input: eventObject - object of UIStyler.StylerEvent class
        //------------------------------------------------------------------------------
        public NXOpen.UIStyler.DialogState option_supplier_cb(NXOpen.UIStyler.StylerEvent eventObject)
        {
            try
            {


                // ---- Enter your callback code here -----


            }
            catch (NXOpen.NXException ex)
            {
                // ---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
            }
            // Callback acknowledged, do not terminate dialog
            return NXOpen.UIStyler.DialogState.ContinueDialog;
            // or Callback acknowledged, terminate dialog.
            // return NXOpen.UIStyler.DialogState.ExitDialog;
        }

        //------------------------------------------------------------------------------
        // Callback Name: check_color_cb
        // Following callback is associated with the "supportPillarToggleColor" Styler item.
        // Input: eventObject - object of UIStyler.StylerEvent class
        //------------------------------------------------------------------------------
        public NXOpen.UIStyler.DialogState check_color_cb(NXOpen.UIStyler.StylerEvent eventObject)
        {
            try
            {


                // ---- Enter your callback code here -----


            }
            catch (NXOpen.NXException ex)
            {
                // ---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
            }
            // Callback acknowledged, do not terminate dialog
            return NXOpen.UIStyler.DialogState.ContinueDialog;
            // or Callback acknowledged, terminate dialog.
            // return NXOpen.UIStyler.DialogState.ExitDialog;
        }

        //------------------------------------------------------------------------------
        // Callback Name: ctol_set_color_cb
        // Following callback is associated with the "supportPillarCtolColor" Styler item.
        // Input: eventObject - object of UIStyler.StylerEvent class
        //------------------------------------------------------------------------------
        public NXOpen.UIStyler.DialogState ctol_set_color_cb(NXOpen.UIStyler.StylerEvent eventObject)
        {
            try
            {


                // ---- Enter your callback code here -----


            }
            catch (NXOpen.NXException ex)
            {
                // ---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
            }
            // Callback acknowledged, do not terminate dialog
            return NXOpen.UIStyler.DialogState.ContinueDialog;
            // or Callback acknowledged, terminate dialog.
            // return NXOpen.UIStyler.DialogState.ExitDialog;
        }

        //------------------------------------------------------------------------------
        // Callback Name: check_layer_cb
        // Following callback is associated with the "supportPillarToggleLayer" Styler item.
        // Input: eventObject - object of UIStyler.StylerEvent class
        //------------------------------------------------------------------------------
        public NXOpen.UIStyler.DialogState check_layer_cb(NXOpen.UIStyler.StylerEvent eventObject)
        {
            try
            {


                // ---- Enter your callback code here -----


            }
            catch (NXOpen.NXException ex)
            {
                // ---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
            }
            // Callback acknowledged, do not terminate dialog
            return NXOpen.UIStyler.DialogState.ContinueDialog;
            // or Callback acknowledged, terminate dialog.
            // return NXOpen.UIStyler.DialogState.ExitDialog;
        }

        //------------------------------------------------------------------------------
        // Callback Name: check_safe_dis_cb
        // Following callback is associated with the "supportPillarToggleSafeDis" Styler item.
        // Input: eventObject - object of UIStyler.StylerEvent class
        //------------------------------------------------------------------------------
        public NXOpen.UIStyler.DialogState check_safe_dis_cb(NXOpen.UIStyler.StylerEvent eventObject)
        {
            try
            {

                // ---- Enter your callback code here -----


            }
            catch (NXOpen.NXException ex)
            {
                // ---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
            }
            // Callback acknowledged, do not terminate dialog
            return NXOpen.UIStyler.DialogState.ContinueDialog;
            // or Callback acknowledged, terminate dialog.
            // return NXOpen.UIStyler.DialogState.ExitDialog;
        }

        //------------------------------------------------------------------------------
        // Callback Name: check_set_plate_transp_cb
        // Following callback is associated with the "supportPillarToggleSetPlateTransp" Styler item.
        // Input: eventObject - object of UIStyler.StylerEvent class
        //------------------------------------------------------------------------------
        public NXOpen.UIStyler.DialogState check_set_plate_transp_cb(NXOpen.UIStyler.StylerEvent eventObject)
        {
            try
            {


                // ---- Enter your callback code here -----


            }
            catch (NXOpen.NXException ex)
            {
                // ---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
            }
            // Callback acknowledged, do not terminate dialog
            return NXOpen.UIStyler.DialogState.ContinueDialog;
            // or Callback acknowledged, terminate dialog.
            // return NXOpen.UIStyler.DialogState.ExitDialog;
        }

        //------------------------------------------------------------------------------
        // Callback Name: int_set_plate_transp_cb
        // Following callback is associated with the "supportPillarIntSetPlateTransp" Styler item.
        // Input: eventObject - object of UIStyler.StylerEvent class
        //------------------------------------------------------------------------------
        public NXOpen.UIStyler.DialogState int_set_plate_transp_cb(NXOpen.UIStyler.StylerEvent eventObject)
        {
            try
            {


                // ---- Enter your callback code here -----


            }
            catch (NXOpen.NXException ex)
            {
                // ---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
            }
            // Callback acknowledged, do not terminate dialog
            return NXOpen.UIStyler.DialogState.ContinueDialog;
            // or Callback acknowledged, terminate dialog.
            // return NXOpen.UIStyler.DialogState.ExitDialog;
        }

        //------------------------------------------------------------------------------
        // Callback Name: radio_screw_type_cb
        // Following callback is associated with the "supportPillarRadioScrewStandard" Styler item.
        // Input: eventObject - object of UIStyler.StylerEvent class
        //------------------------------------------------------------------------------
        public NXOpen.UIStyler.DialogState radio_screw_type_cb(NXOpen.UIStyler.StylerEvent eventObject)
        {
            try
            {


                // ---- Enter your callback code here -----


            }
            catch (NXOpen.NXException ex)
            {
                // ---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
            }
            // Callback acknowledged, do not terminate dialog
            return NXOpen.UIStyler.DialogState.ContinueDialog;
            // or Callback acknowledged, terminate dialog.
            // return NXOpen.UIStyler.DialogState.ExitDialog;
        }

        //------------------------------------------------------------------------------
        // Callback Name: check_screw_color_cb
        // Following callback is associated with the "supportPillarToggleScrewColor" Styler item.
        // Input: eventObject - object of UIStyler.StylerEvent class
        //------------------------------------------------------------------------------
        public NXOpen.UIStyler.DialogState check_screw_color_cb(NXOpen.UIStyler.StylerEvent eventObject)
        {
            try
            {


                // ---- Enter your callback code here -----


            }
            catch (NXOpen.NXException ex)
            {
                // ---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
            }
            // Callback acknowledged, do not terminate dialog
            return NXOpen.UIStyler.DialogState.ContinueDialog;
            // or Callback acknowledged, terminate dialog.
            // return NXOpen.UIStyler.DialogState.ExitDialog;
        }

        //------------------------------------------------------------------------------
        // Callback Name: ctol_set_screw_color_cb
        // Following callback is associated with the "supportPillarCtolScrewColor" Styler item.
        // Input: eventObject - object of UIStyler.StylerEvent class
        //------------------------------------------------------------------------------
        public NXOpen.UIStyler.DialogState ctol_set_screw_color_cb(NXOpen.UIStyler.StylerEvent eventObject)
        {
            try
            {

                // ---- Enter your callback code here -----


            }
            catch (NXOpen.NXException ex)
            {
                // ---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
            }
            // Callback acknowledged, do not terminate dialog
            return NXOpen.UIStyler.DialogState.ContinueDialog;
            // or Callback acknowledged, terminate dialog.
            // return NXOpen.UIStyler.DialogState.ExitDialog;
        }

        //------------------------------------------------------------------------------
        // Callback Name: blo_num_act_cb
        // Following callback is associated with the "supportPillarBloNum" Styler item.
        // Input: eventObject - object of UIStyler.StylerEvent class
        //------------------------------------------------------------------------------
        public NXOpen.UIStyler.DialogState blo_num_act_cb(NXOpen.UIStyler.StylerEvent eventObject)//选择按钮
        {
            try
            {
                workpart.ModelingViews.WorkView.Orient(View.Canned.Top, View.ScaleAdjustment.Fit);//俯视图


                string message = "test";
                double[] screen_pt = {0,0,0 };
                Tag view_tag = Tag.Null;
                int response;
                ufui.SpecifyScreenPosition(message,motion_cb,IntPtr.Zero,screen_pt,out view_tag,out response);

                if(response==UFConstants.UF_UI_PICK_RESPONSE)
                {
                    string msg = string.Format("You Pick Screen Point({0},{1},{2})",screen_pt[0],screen_pt[1],screen_pt[2]);
                    ufui.DisplayMessage(msg,0);

                }
                // ---- Enter your callback code here -----
                

            }
            catch (NXOpen.NXException ex)
            {
                // ---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
            }
            // Callback acknowledged, do not terminate dialog
            return NXOpen.UIStyler.DialogState.ContinueDialog;
            // or Callback acknowledged, terminate dialog.
            // return NXOpen.UIStyler.DialogState.ExitDialog;
        }
        //鼠标移动响应函数
        public void motion_cb(double[] screen_pos ,ref UFUi.MotionCbData motion_cb_data, IntPtr data)//鼠标的移动响应函数
        {
            string msg1 = string.Format("Mouse at Point({0},{1},{2})", screen_pos[0], screen_pos[1], screen_pos[2]);
            
            if(arc==null)
            {
                Point3d point = new Point3d(screen_pos[0], screen_pos[1], screen_pos[2]);
                arc = workpart.Curves.CreateArc(point, vector_x, vector_y, 10, 0, 2 * Math.PI);
            }
            else
            {
                theufsession.Obj.DeleteObject(arc.Tag);
                Point3d point = new Point3d(screen_pos[0], screen_pos[1], screen_pos[2]);
                arc = workpart.Curves.CreateArc(point, vector_x, vector_y, 10, 0, 2 * Math.PI);
                ufui.DisplayMessage(msg1, 0);
            }
        }

        //------------------------------------------------------------------------------
        // Callback Name: action_open_config_act_cb
        // Following callback is associated with the "supportPillarActionOpenConfig" Styler item.
        // Input: eventObject - object of UIStyler.StylerEvent class
        //------------------------------------------------------------------------------
        public NXOpen.UIStyler.DialogState action_open_config_act_cb(NXOpen.UIStyler.StylerEvent eventObject)
        {
            try
            {


                // ---- Enter your callback code here -----


            }
            catch (NXOpen.NXException ex)
            {
                // ---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
            }
            // Callback acknowledged, do not terminate dialog
            return NXOpen.UIStyler.DialogState.ContinueDialog;
            // or Callback acknowledged, terminate dialog.
            // return NXOpen.UIStyler.DialogState.ExitDialog;
        }

    }


}


