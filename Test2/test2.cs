using System;
using System.Linq;
using System.Collections.Generic;
using System.IO;
using NXOpen;
using NXOpen.BlockStyler;
using NXOpen.Utilities;
using NXOpenUI;
using NXOpen.UF;
using NXOpen.Features;
using NPOI.SS.UserModel;
using NPOI.HSSF.UserModel;
using NPOI.XSSF.UserModel;


namespace ZCZ
{
   //==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  E:\fangzheng\application\ZCZ.cs
//
//        This file was generated by the NX Block UI Styler
//        Created by: HS
//              Version: NX 8
//              Date: 01-08-2018  (Format: mm-dd-yyyy)
//              Time: 22:14 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C# source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These imports are needed for the following template code
//------------------------------------------------------------------------------

    //------------------------------------------------------------------------------
    //Represents Block Styler application class
    //------------------------------------------------------------------------------
    //==============================================================================
    //   WARNING!!  This file is overwritten by the UIStyler each time the Styler
    //   file is saved.
    //
    //       Filename:  Supportpillars.cs
    //
    //        This file was generated by the NX User Interface Styler
    //        Created by: HS
    //        Version: NX 8
    //              Date: 02-18-2018
    //              Time: 16:26
    //
    //   This template file is overwritten each time the UIStyler dialog is
    //   saved.  Any modifications to this file will be lost.
    //==============================================================================


    //==============================================================================
    //  Purpose:  This TEMPLATE file contains C#.NET source to guide you in the
    //  construction of your NX Open application dialog. The generation of your
    //  dialog file (.dlg extension) is the first step towards dialog construction
    //  within NX.  You must now create a NX Open application that
    //  utilizes this file (.dlg).


    //  The information in this file provides you with the following:
    //
    //  1.  Help on how to load and display your UIStyler dialog in NX
    //      using APIs provided in NXOpen.UIStyler namespace
    //  2.  The empty callback methods (stubs) associated with your dialog items
    //      have also been placed in this file. These empty methods have been
    //      created simply to start you along with your coding requirements.
    //      The method name, argument list and possible return values have already
    //      been provided for you.
    //==============================================================================


    //------------------------------------------------------------------------------
    // These imports are needed for the following template code
    //------------------------------------------------------------------------------
    using System;
    using NXOpen;
    using NXOpen.UIStyler;


    //------------------------------------------------------------------------------
    // Represents UI Styler application class
    //------------------------------------------------------------------------------
    public class Supportpillars
    {
        // class members
        private static Session theSession;
        private static UI theUI;
        public static Supportpillars theSupportpillars;
        private Dialog theDialog;
        private static UFSession theufsession;
        private static UFObj ufobj = null;
        private static UFModl ufmodel = null;
        private static UFAttr ufattr = null;
        private static UFDisp ufdisp = null;
        private static UFLayer uflayer = null;
        private static Part workpart = null;
        private static UFUi ufui = null;
        private static UFCurve ufcurve = null;
        private static Vector3d vector_x = new Vector3d(1,0,0);
        private static Vector3d vector_y = new Vector3d(0,1,0);
        private static Vector3d vector_z = new Vector3d(0, 0,1);
        private static Point3d origin_point = new Point3d(0, 0, 0);
        private static Arc arc = null;


        private NXOpen.UIStyler.DialogItem supportPillarDialog;
        private NXOpen.UIStyler.BitMap supportPillarBitmap1;
        private NXOpen.UIStyler.StringItem supportPillarStrDiam;
        private NXOpen.UIStyler.StringItem supportPillarStrAvoidDiam;
        private NXOpen.UIStyler.Separator supportPillarSep1;
        private NXOpen.UIStyler.RadioBox supportPillarRadioPosType;
        private NXOpen.UIStyler.GroupBox supportPillarGrBeg1;
        private NXOpen.UIStyler.RealItem supportPillarRealXCoord;
        private NXOpen.UIStyler.RealItem supportPillarRealYCoord;
        private NXOpen.UIStyler.OptionMenu supportPillarOptionSupplier;
        private NXOpen.UIStyler.StringItem supportPillarStrMaterial;
        private NXOpen.UIStyler.StringItem supportPillarStrHeatTrteatment;
        private NXOpen.UIStyler.OptionMenu supportPillarOptionPrecision;
        private NXOpen.UIStyler.Toggle supportPillarToggleColor;
        private NXOpen.UIStyler.ColorTool supportPillarCtolColor;
        private NXOpen.UIStyler.Toggle supportPillarToggleLayer;
        private NXOpen.UIStyler.IntegerItem supportPillarIntLayer;
        private NXOpen.UIStyler.Toggle supportPillarToggleSafeDis;
        private NXOpen.UIStyler.OptionMenu supportPillarOptionSafeDis;
        private NXOpen.UIStyler.Toggle supportPillarToggleSetPlateTransp;
        private NXOpen.UIStyler.IntegerItem supportPillarIntSetPlateTransp;
        private NXOpen.UIStyler.Toggle supportPillarToggleAutoSubtract;
        private NXOpen.UIStyler.RadioBox supportPillarRadioScrewStandard;
        private NXOpen.UIStyler.GroupBox supportPillarGrBeg2;
        private NXOpen.UIStyler.OptionMenu supportPillarOptionScrewSize;
        private NXOpen.UIStyler.OptionMenu supportPillarOptionScrewSupplier;
        private NXOpen.UIStyler.Toggle supportPillarToggleScrewColor;
        private NXOpen.UIStyler.ColorTool supportPillarCtolScrewColor;
        private NXOpen.UIStyler.GroupBox supportPillarGrBeg3;
        private NXOpen.UIStyler.ButtonLayout supportPillarBloNum;
        private NXOpen.UIStyler.IntegerItem supportPillarIntXNum;
        private NXOpen.UIStyler.IntegerItem supportPillarIntYNum;
        private NXOpen.UIStyler.PushButton supportPillarActionOpenConfig;
        private NXOpen.UIStyler.PushButton supportPillarActionUpdate;
        public static bool isDisposeCalled;

        IRow row = null;
        ISheet sheet = null;
        /// <summary>
        /// 最后一个元素为Para，第一个为第一个参数
        /// </summary>
        List<string> supportPillarAttributesList = new List<string>();//
        /// <summary>
        /// 记录有多少个属性,最后一个为END,第一个为第一个Supplier
        /// </summary>
        List<string> supportPillarParaRow0List = new List<string>();//
        List<int> supportPillarSupplierRowNum = new List<int>();//支撑住属性区间
        public double[] supportPillarSelPoint=null;
        public int supportPillarParaTittleRow = 0;
        public int supportPillarSupplierRow = 0;

        IRow screwRow = null;
        ISheet screwSheet = null;
        List<string> screwParaRow0List = new List<string>();//
        List<string> screwAttributesList = new List<string>();//
        List<int> screwSupplierRowNum = new List<int>();//螺丝属性区间
        public int screwParaTittleRow = 0;
        public int screwSupplierRow = 0;

        public Dictionary<string, double> paraDictorary = new Dictionary<string, double>() { { "BaseboardUpFaceZ", 0 },{ "BaseboardDownFaceZ", 0 }, { "BboardDownFaceZ", 0 }, {"supportPillarDiameter",0 }, {"supportPillarHeight",0 }, {"supportPillarScrewDiameter",0 },
                                                          {"supportPillarAvoid" ,0}, {"supportPillarChamfer",0 }, {"screwUpCylinderDiameter",0}, {"screwUpCylinderHeight",0 }, {"screwDownCylinderDiameter",0 }, {"screwDownCylinderHeight",0  }, {"screwSexangleLength",0 },
                                                           { "screwSexangleHeight",0}, {"subDownCylinderHeight" ,0},{"subDownCylinderDiameter" ,0}, {"subUpCylinderDiameter",0 } };
        #region " UI Styler Dialog Designer generator code "
        //------------------------------------------------------------------------------
        // Constructor for NX Styler class
        //------------------------------------------------------------------------------
        public Supportpillars()
        {
            try
            {
                theSession = Session.GetSession();
                theUI = UI.GetUI();
                workpart = theSession.Parts.Work;
                theufsession = UFSession.GetUFSession();
                ufobj = theufsession.Obj;
                ufmodel = theufsession.Modl;
                ufattr = theufsession.Attr;
                ufdisp = theufsession.Disp;
                uflayer = theufsession.Layer;
                ufui = theufsession.Ui;
                ufcurve = theufsession.Curve;
                theDialog = theUI.Styler.CreateStylerDialog("supportpillars.dlg");
                InitializeUIStylerDialog();
                isDisposeCalled = false;

            }
            catch (NXOpen.NXException ex)
            {
                // ---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
            }
        }

        //------------------------------------------------------------------------------
        // This method is required for UI styler dialog creation
        //------------------------------------------------------------------------------
        private void InitializeUIStylerDialog()
        {
            try
            {
                //------------------------------------------------------------------------------
                // The following code snippets initializes all the styler items and associate
                // respective callbacks. Attributes of the styler item can be accessed and
                // modified only after calling Show() or RegisterWithUiMenu().
                //------------------------------------------------------------------------------
                supportPillarDialog = (NXOpen.UIStyler.DialogItem)theDialog.GetStylerItem("UF_STYLER_DIALOG_INDEX", Dialog.ItemType.DialogItem);
                supportPillarDialog.AddConstructHandler(new NXOpen.UIStyler.DialogItem.Construct(initialize_cb), false);
                supportPillarDialog.AddDestructHandler(new NXOpen.UIStyler.DialogItem.Destruct(destory_cb), false);
                supportPillarBitmap1 = (NXOpen.UIStyler.BitMap)theDialog.GetStylerItem("BITMAP_1", Dialog.ItemType.Bitmap);
                supportPillarStrDiam = (NXOpen.UIStyler.StringItem)theDialog.GetStylerItem("STR_DIAM", Dialog.ItemType.StringItem);
                supportPillarStrAvoidDiam = (NXOpen.UIStyler.StringItem)theDialog.GetStylerItem("STR_AVOID_DIAM", Dialog.ItemType.StringItem);
                supportPillarSep1 = (NXOpen.UIStyler.Separator)theDialog.GetStylerItem("SEP_1", Dialog.ItemType.Separator);
                supportPillarRadioPosType = (NXOpen.UIStyler.RadioBox)theDialog.GetStylerItem("RADIO_POS_TYPE", Dialog.ItemType.RadioBox);
                supportPillarRadioPosType.AddValueChangedHandler(new NXOpen.UIStyler.RadioBox.ValueChanged(radio_pos_type_cb), false);
                supportPillarGrBeg1 = (NXOpen.UIStyler.GroupBox)theDialog.GetStylerItem("GR_BEG_1", Dialog.ItemType.GroupBox);
                supportPillarRealXCoord = (NXOpen.UIStyler.RealItem)theDialog.GetStylerItem("REAL_X_COORD", Dialog.ItemType.RealItem);
                supportPillarRealXCoord.AddActivateHandler(new NXOpen.UIStyler.RealItem.Activate(action_button_update_act_cb), true);
                supportPillarRealYCoord = (NXOpen.UIStyler.RealItem)theDialog.GetStylerItem("REAL_Y_COORD", Dialog.ItemType.RealItem);
                supportPillarRealYCoord.AddActivateHandler(new NXOpen.UIStyler.RealItem.Activate(action_button_update_act_cb), true);
                supportPillarOptionSupplier = (NXOpen.UIStyler.OptionMenu)theDialog.GetStylerItem("OPTION_SUPPLIER", Dialog.ItemType.OptionMenu);
                supportPillarOptionSupplier.AddActivateHandler(new NXOpen.UIStyler.OptionMenu.Activate(option_supplier_cb), true);
                supportPillarStrMaterial = (NXOpen.UIStyler.StringItem)theDialog.GetStylerItem("STR_MATERIAL", Dialog.ItemType.StringItem);
                supportPillarStrHeatTrteatment = (NXOpen.UIStyler.StringItem)theDialog.GetStylerItem("STR_HEAT_TRTEATMENT", Dialog.ItemType.StringItem);
                supportPillarOptionPrecision = (NXOpen.UIStyler.OptionMenu)theDialog.GetStylerItem("OPTION_PRECISION", Dialog.ItemType.OptionMenu);
                supportPillarToggleColor = (NXOpen.UIStyler.Toggle)theDialog.GetStylerItem("TOGGLE_COLOR", Dialog.ItemType.Toggle);
                supportPillarToggleColor.AddValueChangedHandler(new NXOpen.UIStyler.Toggle.ValueChanged(check_color_cb), false);
                supportPillarCtolColor = (NXOpen.UIStyler.ColorTool)theDialog.GetStylerItem("CTOL_COLOR", Dialog.ItemType.ColorTool);
                supportPillarCtolColor.AddValueChangedHandler(new NXOpen.UIStyler.ColorTool.ValueChanged(ctol_set_color_cb), false);
                supportPillarToggleLayer = (NXOpen.UIStyler.Toggle)theDialog.GetStylerItem("TOGGLE_LAYER", Dialog.ItemType.Toggle);
                supportPillarToggleLayer.AddValueChangedHandler(new NXOpen.UIStyler.Toggle.ValueChanged(check_layer_cb), false);
                supportPillarIntLayer = (NXOpen.UIStyler.IntegerItem)theDialog.GetStylerItem("INT_LAYER", Dialog.ItemType.IntegerItem);
                supportPillarToggleSafeDis = (NXOpen.UIStyler.Toggle)theDialog.GetStylerItem("TOGGLE_SAFE_DIS", Dialog.ItemType.Toggle);
                supportPillarToggleSafeDis.AddValueChangedHandler(new NXOpen.UIStyler.Toggle.ValueChanged(check_safe_dis_cb), false);
                supportPillarOptionSafeDis = (NXOpen.UIStyler.OptionMenu)theDialog.GetStylerItem("OPTION_SAFE_DIS", Dialog.ItemType.OptionMenu);
                supportPillarToggleSetPlateTransp = (NXOpen.UIStyler.Toggle)theDialog.GetStylerItem("TOGGLE_SET_PLATE_TRANSP", Dialog.ItemType.Toggle);
                supportPillarToggleSetPlateTransp.AddValueChangedHandler(new NXOpen.UIStyler.Toggle.ValueChanged(check_set_plate_transp_cb), false);
                supportPillarIntSetPlateTransp = (NXOpen.UIStyler.IntegerItem)theDialog.GetStylerItem("INT_SET_PLATE_TRANSP", Dialog.ItemType.IntegerItem);
                supportPillarIntSetPlateTransp.AddActivateHandler(new NXOpen.UIStyler.IntegerItem.Activate(int_set_plate_transp_cb), true);
                supportPillarToggleAutoSubtract = (NXOpen.UIStyler.Toggle)theDialog.GetStylerItem("TOGGLE_AUTO_SUBTRACT", Dialog.ItemType.Toggle);
                supportPillarRadioScrewStandard = (NXOpen.UIStyler.RadioBox)theDialog.GetStylerItem("RADIO_SCREW_STANDARD", Dialog.ItemType.RadioBox);
                supportPillarRadioScrewStandard.AddValueChangedHandler(new NXOpen.UIStyler.RadioBox.ValueChanged(radio_screw_type_cb), false);
                supportPillarGrBeg2 = (NXOpen.UIStyler.GroupBox)theDialog.GetStylerItem("GR_BEG_2", Dialog.ItemType.GroupBox);
                supportPillarOptionScrewSize = (NXOpen.UIStyler.OptionMenu)theDialog.GetStylerItem("OPTION_SCREW_SIZE", Dialog.ItemType.OptionMenu);
                supportPillarOptionScrewSupplier = (NXOpen.UIStyler.OptionMenu)theDialog.GetStylerItem("OPTION_SCREW_SUPPLIER", Dialog.ItemType.OptionMenu);
                supportPillarToggleScrewColor = (NXOpen.UIStyler.Toggle)theDialog.GetStylerItem("TOGGLE_SCREW_COLOR", Dialog.ItemType.Toggle);
                supportPillarToggleScrewColor.AddValueChangedHandler(new NXOpen.UIStyler.Toggle.ValueChanged(check_screw_color_cb), false);
                supportPillarCtolScrewColor = (NXOpen.UIStyler.ColorTool)theDialog.GetStylerItem("CTOL_SCREW_COLOR", Dialog.ItemType.ColorTool);
                supportPillarCtolScrewColor.AddValueChangedHandler(new NXOpen.UIStyler.ColorTool.ValueChanged(ctol_set_screw_color_cb), false);
                supportPillarGrBeg3 = (NXOpen.UIStyler.GroupBox)theDialog.GetStylerItem("GR_BEG_3", Dialog.ItemType.GroupBox);
                supportPillarBloNum = (NXOpen.UIStyler.ButtonLayout)theDialog.GetStylerItem("BLO_NUM", Dialog.ItemType.ButtonLayout);
                supportPillarBloNum.AddActivateHandler(new NXOpen.UIStyler.ButtonLayout.Activate(blo_num_act_cb), true);
                supportPillarIntXNum = (NXOpen.UIStyler.IntegerItem)theDialog.GetStylerItem("INT_X_NUM", Dialog.ItemType.IntegerItem);
                supportPillarIntYNum = (NXOpen.UIStyler.IntegerItem)theDialog.GetStylerItem("INT_Y_NUM", Dialog.ItemType.IntegerItem);
                supportPillarActionOpenConfig = (NXOpen.UIStyler.PushButton)theDialog.GetStylerItem("ACTION_OPEN_CONFIG", Dialog.ItemType.PushButton);
                supportPillarActionOpenConfig.AddActivateHandler(new NXOpen.UIStyler.PushButton.Activate(action_open_config_act_cb), true);
                supportPillarActionUpdate = (NXOpen.UIStyler.PushButton)theDialog.GetStylerItem("ACTION_UPDATE", Dialog.ItemType.PushButton);
                supportPillarActionUpdate.AddActivateHandler(new NXOpen.UIStyler.PushButton.Activate(action_button_update_act_cb), true);
            }
            catch (NXOpen.NXException ex)
            {
                // ---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
            }
        }

        #endregion

        // -------------------------- MENUBAR HOOKUP HELP Example ----------------------
        // To launch this dialog from a NX menubar, you must follow the steps below:


        //      1)Add the following lines to your MenuScript file in order to
        //        associate a menu bar button with your dialog.  In this
        //        example, a cascade menu will be created and will be
        //        located just before the Help button on the main menubar.
        //        The button, SUPPORTPILLARS_BTN is set up to launch your dialog and
        //        will be positioned as the first button on your pulldown menu.
        //        If you wish to add the button to an existing cascade, simply
        //        add the 3 lines between MENU LAUNCH_CASCADE and END_OF_MENU
        //        to your menuscript file.

        //        The MenuScript file requires an extension of ".men".
        //        Make sure that you add the extension to the file and place
        //        the file in your startup directory:
        //             $UGII_USER_DIR/startup or
        //             $UGII_SITE_DIR/startup or
        //             $UGII_VENDOR_DIR/startup directory

        //        Move the contents between the dashed lines to your Menuscript file.
        //        !-----------------------------------------------------------------------------
        //        VERSION 120
        // 
        //        EDIT UG_GATEWAY_MAIN_MENUBAR
        // 
        //        BEFORE UG_HELP
        //        CASCADE_BUTTON UISTYLER_DLG_CASCADE_BTN
        //        LABEL Dialog Launcher
        //        END_OF_BEFORE
        // 
        //        MENU UISTYLER_DLG_CASCADE_BTN
        //        BUTTON SUPPORTPILLARS_BTN
        //        LABEL Display Supportpillars dialog
        //        ACTIONS supportpillars.dlg
        //        END_OF_MENU
        //        !-----------------------------------------------------------------------------

        //      2)Issue a call to the function, RegisterWithUiMenu() from the Startup()
        //        as shown below.
        //        To use this call, remove the conditional definitions:
        //             #if MENUBAR_COMMENTED_OUT
        //             #endif

        //      3)Place your compiled and linked DLL in 
        //             $UGII_USER_DIR/startup or
        //             $UGII_SITE_DIR/startup or
        //             $UGII_VENDOR_DIR/startup directory.

        //       NOTE:  The shared libraries must contain the proper extension .dll
        //       to make ensure that it is recognized by the MenuScript.  If it does not
        //       have the proper extension, it will NOT be recognized by MenuScript.

        //       The action name you have provided in your MenuScript must correspond to
        //       to the dialog name provided in the action structure.  This MUST match inorder
        //       to bind your dlg file to your MenuScript button.

        //      4)Copy your UIStyler dialog file to the proper directory.
        //        All dialog files (.dlg) must be located in 
        //             $UGII_USER_DIR/application or
        //             $UGII_SITE_DIR/application or
        //             $UGII_VENDOR_DIR/application directory
        //------------------------------------------------------------------------------
#if MENUBAR_COMMENTED_OUT
    public static int Startup()
    {
        int retValue = 0;
        try
        {
            theSupportpillars = new Supportpillars();
            // The following method registers the dialog with a menu item
            theSupportpillars.RegisterWithUiMenu();

            retValue = 0;
        }
        catch (NXOpen.NXException ex)
        {
            // ---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
        }
        return retValue;
    } // Startup ends

    //------------------------------------------------------------------------------
    // The flag "isTopDialog", informs menubar about the dialog location.
    // This flag MUST match the resource set in the dialog.
    // DO NOT ASSUME that changing this field will update the location of the dialog.
    // Please use the UIStyler to indicate the position of the dialog.
    //------------------------------------------------------------------------------
    public void RegisterWithUiMenu()
    {
        try
        {
            bool isTopDialog = false;
            theDialog.RegisterWithUiMenu(isTopDialog);
        }
        catch (NXOpen.NXException ex)
        {
            // ---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
        }
    }


#endif // MENUBAR_COMMENTED_OUT


        // --------------- DIALOG CREATION FROM A CALLBACK HELP Example -----------------
        // If you wish to have this dialog displayed from the callback of another
        // UIStyler dialog, you should:


        //      1)Make sure that the callback of your UIStyler dialog is
        //        designated as a dialog building callback.
        //      2)Remove the conditional definitions:
        //             #if DISPLAY_FROM_CALLBACK
        //             #endif

        //      3)Your callback should issue a call to this method.


        // All dialog files must be located in
        //             $UGII_USER_DIR/application or
        //             $UGII_SITE_DIR/application or
        //             $UGII_VENDOR_DIR/application directory
        //------------------------------------------------------------------------------
#if DISPLAY_FROM_CALLBACK
    public static void <enter the name of your function>(ref NXOpen.UIStyler.DialogResponse response)
    {
        try
        {
            theSupportpillars = new Supportpillars();
            // The following method shows the dialog immediately
            response = theSupportpillars.Show();
            theSupportpillars.Dispose();
        }
        catch (NXOpen.NXException ex)
        {
            // ---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
        }
    }

#endif // DISPLAY_FROM_CALLBACK


        //---------------- DIALOG CREATION FROM A USER EXIT HELP Example ---------------
        // An example is shown below to create this dialog from a user exit.
        // All dialog files must be located in
        //             $UGII_USER_DIR/application or
        //             $UGII_SITE_DIR/application or
        //             $UGII_VENDOR_DIR/application directory


        //      1)Remove the conditional definitions:
        //             #if DISPLAY_FROM_USER_EXIT
        //             #endif

        //      2)Add a user exit to the method name below, for example, Main().
        //      3)Consider how your shared library will be unloaded.  Take a look
        //        at the method GetUnloadOption().
        //------------------------------------------------------------------------------

        public static void Main()
        {
            try
            {
                NXOpen.UIStyler.DialogResponse response;
                theSupportpillars = new Supportpillars();
                // The following method shows the dialog immediately
                response = theSupportpillars.Show();
                theSupportpillars.Dispose();
            }
            catch (NXOpen.NXException ex)
            {
                // ---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
            }
        } // User exit ends

        //------------------------------------------------------------------------------
        // This method specifies how a shared image is unloaded from memory
        // within NX. This method gives you the capability to unload an
        // internal NX Open application or user  exit from NX. Specify any
        // one of the three constants as a return value to determine the type
        // of unload to perform:


        //    Immediately : unload the library as soon as the automation program has completed
        //    Explicitly  : unload the library from the "Unload Shared Image" dialog
        //    AtTermination : unload the library when the NX session terminates


        // NOTE:  A program which associates NX Open applications with the menubar
        // MUST NOT use this option since it will UNLOAD your NX Open application image
        // from the menubar.
        //------------------------------------------------------------------------------
        public static int GetUnloadOption(string arg)
        {
            // Return code to indicate this library can be unloaded
            // by the user.
            return System.Convert.ToInt32(Session.LibraryUnloadOption.Explicitly);
            // return System.Convert.ToInt32(Session.LibraryUnloadOption.Immediately);
            // return System.Convert.ToInt32(Session.LibraryUnloadOption.AtTermination);
        }

        //------------------------------------------------------------------------------
        // Following method cleanup any housekeeping chores that may be needed.
        // This method is automatically called by NX.
        //------------------------------------------------------------------------------
        public static int UnloadLibrary(string arg)
        {
            try
            {
                if (theSupportpillars == null)
                {
                    theSupportpillars.Dispose();
                }
            }
            catch (NXOpen.NXException ex)
            {
                // ---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
            }
            return 0;
        }




        //------------------------------------------------------------------------------
        // This method shows the dialog on the screen
        //------------------------------------------------------------------------------
        public NXOpen.UIStyler.DialogResponse Show()
        {
            NXOpen.UIStyler.DialogResponse retValue = NXOpen.UIStyler.DialogResponse.Ok;
            try
            {
                retValue = theDialog.Show();
            }
            catch (NXOpen.NXException ex)
            {
                // ---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
            }
            return retValue;
        }


        //------------------------------------------------------------------------------
        // Following method disposes all the class members
        //------------------------------------------------------------------------------
        public void Dispose()
        {
            try
            {
                if (isDisposeCalled == false)
                {
                    supportPillarDialog.Dispose();
                    supportPillarBitmap1.Dispose();
                    supportPillarStrDiam.Dispose();
                    supportPillarStrAvoidDiam.Dispose();
                    supportPillarSep1.Dispose();
                    supportPillarRadioPosType.Dispose();
                    supportPillarGrBeg1.Dispose();
                    supportPillarRealXCoord.Dispose();
                    supportPillarRealYCoord.Dispose();
                    supportPillarOptionSupplier.Dispose();
                    supportPillarStrMaterial.Dispose();
                    supportPillarStrHeatTrteatment.Dispose();
                    supportPillarOptionPrecision.Dispose();
                    supportPillarToggleColor.Dispose();
                    supportPillarCtolColor.Dispose();
                    supportPillarToggleLayer.Dispose();
                    supportPillarIntLayer.Dispose();
                    supportPillarToggleSafeDis.Dispose();
                    supportPillarOptionSafeDis.Dispose();
                    supportPillarToggleSetPlateTransp.Dispose();
                    supportPillarIntSetPlateTransp.Dispose();
                    supportPillarToggleAutoSubtract.Dispose();
                    supportPillarRadioScrewStandard.Dispose();
                    supportPillarGrBeg2.Dispose();
                    supportPillarOptionScrewSize.Dispose();
                    supportPillarOptionScrewSupplier.Dispose();
                    supportPillarToggleScrewColor.Dispose();
                    supportPillarCtolScrewColor.Dispose();
                    supportPillarGrBeg3.Dispose();
                    supportPillarBloNum.Dispose();
                    supportPillarIntXNum.Dispose();
                    supportPillarIntYNum.Dispose();
                    supportPillarActionOpenConfig.Dispose();
                    supportPillarActionUpdate.Dispose();
                    theDialog.Dispose();
                }
                isDisposeCalled = true;
            }
            catch (NXOpen.NXException ex)
            {
                // ---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
            }
        }

        //------------------------------------------------------------------------------
        //------------------------- UIStyler Callback Functions ------------------------
        //------------------------------------------------------------------------------


        //------------------------------------------------------------------------------
        // Callback Name: initialize_cb
        // Following callback is associated with the "supportPillarDialog" Styler item.
        // Input: eventObject - object of UIStyler.StylerEvent class
        //------------------------------------------------------------------------------
        public NXOpen.UIStyler.DialogState initialize_cb(NXOpen.UIStyler.StylerEvent eventObject)
        {
            try
            {
                List<Tag> PartObjectList = new List<Tag>();
                Tag[] BodyArray = new Tag[4];
                Tag NextTag=Tag.Null;
                string attr_string=string.Empty;
                ufobj.CycleObjsInPart(workpart.Tag,UFConstants.UF_solid_type, ref NextTag);

                while(NextTag!=Tag.Null)
                {
                   if (NextTag == Tag.Null) break;
                   int t, subType;
                   ufobj.AskTypeAndSubtype(NextTag, out t, out subType);
                   if (subType == 0/*UF_solid_body_subtype*/)
                   {
                        PartObjectList.Add(NextTag);
                   }
                   ufobj.CycleObjsInPart(workpart.Tag, UFConstants.UF_solid_type, ref NextTag);
                }
                for (int i=0;i< PartObjectList.Count;i++)
                {
                    Tag[] feature_tag;
                    ufmodel.AskBodyFeats(PartObjectList[i], out feature_tag);
                    NXOpen.Features.Feature feature_body;
                    feature_body = NXObjectManager.Get(feature_tag[0]) as NXOpen.Features.Feature;

                    #region 属性选取
                    if (feature_body.HasUserAttribute("中文名称", NXObject.AttributeType.String, -1))
                    {
                        attr_string = feature_body.GetStringAttribute("中文名称");
                        if (attr_string == "动模底板")
                        {
                            BodyArray[0] = PartObjectList[i];
                            Tag[] FaceList;
                            ufmodel.AskBodyFaces(BodyArray[0], out FaceList);
                            int FaceType;
                            double[] FacePoint = new double[3];
                            double[] FaceDirection = new double[3];
                            double[] FaceBox = new double[6];
                            double FaceRadius;
                            double FaceRadData;
                            double ErrorSpaceX, ErrorSpaceY;
                            int FaceNormDirection;
                            for (int j = 0; j < FaceList.Length; j++)//对于上表面和下表面判断的标准太过简单，未考虑中间的状况
                            {
                                ufmodel.AskFaceData(FaceList[j], out FaceType, FacePoint, FaceDirection, FaceBox, out FaceRadius, out FaceRadData, out FaceNormDirection);
                                ErrorSpaceX = Math.Abs(FacePoint[0]);
                                ErrorSpaceY = Math.Abs(FacePoint[1]);
                                if ((ErrorSpaceX < 0.06) && (ErrorSpaceY < 0.06) && (Math.Abs(FaceDirection[2] - 1) < 0.01))
                                { paraDictorary["BaseboardUpFaceZ"] = FacePoint[2]; }

                                else if ((ErrorSpaceX < 0.01) && (ErrorSpaceY < 0.01) && (Math.Abs(FaceDirection[2] + 1) < 0.01))
                                { paraDictorary["BaseboardDownFaceZ"] = FacePoint[2]; }
                            }
                        }
                        if (attr_string == "动模顶针底板")
                        {
                            BodyArray[1] = PartObjectList[i];
                        }
                        if (attr_string == "动模顶针面板")
                        {
                            BodyArray[2] = PartObjectList[i];
                        }
                        if (attr_string == "B板")
                        {

                            BodyArray[3] = PartObjectList[i];
                            Tag[] FaceList;
                            ufmodel.AskBodyFaces(BodyArray[3], out FaceList);
                            int FaceType;
                            double[] FacePoint = new double[3];
                            double[] FaceDirection = new double[3];
                            double[] FaceBox = new double[6];
                            double FaceRadius;
                            double FaceRadData;
                            double ErrorSpaceX, ErrorSpaceY;
                            int FaceNormDirection;
                            for (int j = 0; j < FaceList.Length; j++)//对于上表面和下表面判断的标准太过简单，未考虑中间的状况//通过判断最小和最大的Z值
                            {
                                ufmodel.AskFaceData(FaceList[j], out FaceType, FacePoint, FaceDirection, FaceBox, out FaceRadius, out FaceRadData, out FaceNormDirection);
                                ErrorSpaceX = Math.Abs(FacePoint[0]);
                                ErrorSpaceY = Math.Abs(FacePoint[1]);
                                if ((ErrorSpaceX < 0.06) && (ErrorSpaceY < 0.06) && (Math.Abs(FaceDirection[2] + 1) < 0.01))
                                { paraDictorary["BboardDownFaceZ"] = FacePoint[2]; }
                            }
                        }
                    }
                    #endregion 
                }

                #region 支撑柱excel读取
                sheet = GetExcelSheet("SupportPillar.xls", "SupportPillar");
                row = sheet.GetRow(0);
                string CellValue = row.GetCell(0).StringCellValue;
                int index = 0;
                while (CellValue != "END")
                {
                    if (CellValue == "ATTRIBUTES")
                    {
                        while (CellValue != "PARAMETERS")
                        {
                            index++;
                            CellValue = sheet.GetRow(index).GetCell(0).StringCellValue;
                            supportPillarAttributesList.Add(CellValue);
                        }

                        //获取属性行数号
                        supportPillarParaTittleRow = index;

                    }
                    else if (CellValue == "SUPPLIER")
                    {
                        while (CellValue != "END")
                        {
                            index++;
                            CellValue = sheet.GetRow(index).GetCell(0).StringCellValue;
                            if (CellValue != "")
                            {
                                supportPillarParaRow0List.Add(CellValue);
                                supportPillarSupplierRowNum.Add(index);
                            }
                        }
                    }
                    else
                    {
                        index++;
                        CellValue = sheet.GetRow(index).GetCell(0).StringCellValue;
                    }
                }

                //供应商下拉框数据
                List<string> SupplierList = new List<string>();
                for(int j=0;j<(supportPillarParaRow0List.Count-1);j++)
                {
                    SupplierList.Add(supportPillarParaRow0List[j]);
                }
                supportPillarOptionSupplier.SetItems(SupplierList.ToArray());
                int SelSupplierIndex = supportPillarOptionSupplier.ItemValue;

                //直径下拉框数据
                List<string> SelParaArry = new List<string>();
                for (int i = supportPillarSupplierRowNum[SelSupplierIndex]; i < supportPillarSupplierRowNum[SelSupplierIndex + 1]; i++)
                {
                    SelParaArry.Add(sheet.GetRow(i).GetCell(1).StringCellValue);
                }
                supportPillarOptionSafeDis.SetItems(SelParaArry.ToArray());

                //初始化行号，为第一个参数
                supportPillarSupplierRow = supportPillarSupplierRowNum[0];
                supportPillarStrAvoidDiam.ItemValue = GetExcelForParaAndRow(sheet, supportPillarSupplierRow, "直径单边避空", supportPillarParaTittleRow);
                #endregion

                #region 螺丝属性读取
                screwSheet = GetExcelSheet("Screw.xls","Screw");
                screwRow = screwSheet.GetRow(0);
                string screwCellValue = screwRow.GetCell(0).StringCellValue;
                int screwIndex = 0;
                while (screwCellValue != "END")
                {
                    if (screwCellValue == "ATTRIBUTES")
                    {
                        while (screwCellValue != "PARAMETERS")
                        {
                            screwIndex++;
                            screwCellValue = screwSheet.GetRow(screwIndex).GetCell(0).StringCellValue;
                            supportPillarAttributesList.Add(screwCellValue);
                        }

                        //获取属性行数号
                        screwParaTittleRow = screwIndex;

                    }
                    else if (screwCellValue == "SUPPLIER")
                    {
                        while (screwCellValue != "END")
                        {
                            screwIndex++;
                            screwCellValue = screwSheet.GetRow(screwIndex).GetCell(0).StringCellValue;
                            if (screwCellValue != "")
                            {
                                screwParaRow0List.Add(screwCellValue);
                                screwSupplierRowNum.Add(screwIndex);
                            }
                        }
                    }
                    else
                    {
                        screwIndex++;
                        screwCellValue = screwSheet.GetRow(screwIndex).GetCell(0).StringCellValue;
                    }
                }
                /*
                List<string> screwSupplierList = new List<string>();
                for(int j=0;j<(screwParaRow0List.Count-1);j++)
                {
                    screwSupplierList.Add(screwParaRow0List[j]);
                }
                supportPillarOptionScrewSupplier.SetItems(screwSupplierList.ToArray());
                int selScrewSupplierIndex = supportPillarOptionScrewSupplier.ItemValue;

                //直径下拉框数据
                List<string> screwSelParaArry = new List<string>();
                for (int i = screwSupplierRowNum[selScrewSupplierIndex]; i < screwSupplierRowNum[selScrewSupplierIndex + 1]; i++)
                {
                    screwSelParaArry.Add(screwSheet.GetRow(i).GetCell(1).StringCellValue);
                }
                supportPillarOptionScrewSize.SetItems(screwSelParaArry.ToArray());*/

                #endregion

                // ---- Enter your callback code here -----


            }
            catch (NXOpen.NXException ex)
            {
                // ---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
            }
            // Callback acknowledged, do not terminate dialog x   
            // A return value of NXOpen.UIStyler.DialogState.ExitDialog will not be accepted
            // for this callback type. You must continue dialog construction.
            return NXOpen.UIStyler.DialogState.ContinueDialog;
        }
        //------------------------------------------------------------------------------
        // Callback Name: destory_cb
        // Following callback is associated with the "supportPillarDialog" Styler item.
        // Input: eventObject - object of UIStyler.StylerEvent class
        //------------------------------------------------------------------------------
        public NXOpen.UIStyler.DialogState destory_cb(NXOpen.UIStyler.StylerEvent eventObject)
        {
            try
            {


                // ---- Enter your callback code here -----


            }
            catch (NXOpen.NXException ex)
            {
                // ---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
            }
            // Callback acknowledged, do not terminate dialog
            // A return value of NXOpen.UIStyler.DialogState.ExitDialog will not be accepted
            // for this callback type. You must continue dialog destruction.
            return NXOpen.UIStyler.DialogState.ContinueDialog;
        }

        //------------------------------------------------------------------------------
        // Callback Name: radio_pos_type_cb
        // Following callback is associated with the "supportPillarRadioPosType" Styler item.
        // Input: eventObject - object of UIStyler.StylerEvent class
        //------------------------------------------------------------------------------
        public NXOpen.UIStyler.DialogState radio_pos_type_cb(NXOpen.UIStyler.StylerEvent eventObject)
        {
            try
            {


                // ---- Enter your callback code here -----


            }
            catch (NXOpen.NXException ex)
            {
                // ---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
            }
            // Callback acknowledged, do not terminate dialog
            return NXOpen.UIStyler.DialogState.ContinueDialog;
            // or Callback acknowledged, terminate dialog.
            // return NXOpen.UIStyler.DialogState.ExitDialog;
        }

        //------------------------------------------------------------------------------
        // Callback Name: action_button_update_act_cb
        // Following callback is associated with the "supportPillarRealXCoord" Styler item.
        // Input: eventObject - object of UIStyler.StylerEvent class
        //------------------------------------------------------------------------------
        public NXOpen.UIStyler.DialogState action_button_update_act_cb(NXOpen.UIStyler.StylerEvent eventObject)
        {
            try
            {


                // ---- Enter your callback code here -----


            }
            catch (NXOpen.NXException ex)
            {
                // ---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
            }
            // Callback acknowledged, do not terminate dialog
            return NXOpen.UIStyler.DialogState.ContinueDialog;
            // or Callback acknowledged, terminate dialog.
            // return NXOpen.UIStyler.DialogState.ExitDialog;
        }

        //------------------------------------------------------------------------------
        // Callback Name: option_supplier_cb
        // Following callback is associated with the "supportPillarOptionSupplier" Styler item.
        // Input: eventObject - object of UIStyler.StylerEvent class
        //------------------------------------------------------------------------------
        public NXOpen.UIStyler.DialogState option_supplier_cb(NXOpen.UIStyler.StylerEvent eventObject)
        {
            try
            {
                //使直径下拉框与供应商下拉框相对应
                int SelSupplierIndex = supportPillarOptionSupplier.ItemValue;
                List<string> SelParaArry = new List<string>();
                for (int i = supportPillarSupplierRowNum[SelSupplierIndex]; i < supportPillarSupplierRowNum[SelSupplierIndex + 1]; i++)
                {
                    SelParaArry.Add(sheet.GetRow(i).GetCell(1).StringCellValue);
                }
                supportPillarOptionSafeDis.SetItems(SelParaArry.ToArray());

                //供应商的行号
                supportPillarSupplierRow = supportPillarSupplierRowNum[SelSupplierIndex];

                // ---- Enter your callback code here -----


            }
            catch (NXOpen.NXException ex)
            {
                // ---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
            }
            // Callback acknowledged, do not terminate dialog
            return NXOpen.UIStyler.DialogState.ContinueDialog;
            // or Callback acknowledged, terminate dialog.
            // return NXOpen.UIStyler.DialogState.ExitDialog;
        }

        //------------------------------------------------------------------------------
        // Callback Name: check_color_cb
        // Following callback is associated with the "supportPillarToggleColor" Styler item.
        // Input: eventObject - object of UIStyler.StylerEvent class
        //------------------------------------------------------------------------------
        public NXOpen.UIStyler.DialogState check_color_cb(NXOpen.UIStyler.StylerEvent eventObject)
        {
            try
            {


                // ---- Enter your callback code here -----


            }
            catch (NXOpen.NXException ex)
            {
                // ---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
            }
            // Callback acknowledged, do not terminate dialog
            return NXOpen.UIStyler.DialogState.ContinueDialog;
            // or Callback acknowledged, terminate dialog.
            // return NXOpen.UIStyler.DialogState.ExitDialog;
        }

        //------------------------------------------------------------------------------
        // Callback Name: ctol_set_color_cb
        // Following callback is associated with the "supportPillarCtolColor" Styler item.
        // Input: eventObject - object of UIStyler.StylerEvent class
        //------------------------------------------------------------------------------
        public NXOpen.UIStyler.DialogState ctol_set_color_cb(NXOpen.UIStyler.StylerEvent eventObject)
        {
            try
            {


                // ---- Enter your callback code here -----


            }
            catch (NXOpen.NXException ex)
            {
                // ---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
            }
            // Callback acknowledged, do not terminate dialog
            return NXOpen.UIStyler.DialogState.ContinueDialog;
            // or Callback acknowledged, terminate dialog.
            // return NXOpen.UIStyler.DialogState.ExitDialog;
        }

        //------------------------------------------------------------------------------
        // Callback Name: check_layer_cb
        // Following callback is associated with the "supportPillarToggleLayer" Styler item.
        // Input: eventObject - object of UIStyler.StylerEvent class
        //------------------------------------------------------------------------------
        public NXOpen.UIStyler.DialogState check_layer_cb(NXOpen.UIStyler.StylerEvent eventObject)
        {
            try
            {


                // ---- Enter your callback code here -----


            }
            catch (NXOpen.NXException ex)
            {
                // ---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
            }
            // Callback acknowledged, do not terminate dialog
            return NXOpen.UIStyler.DialogState.ContinueDialog;
            // or Callback acknowledged, terminate dialog.
            // return NXOpen.UIStyler.DialogState.ExitDialog;
        }

        //------------------------------------------------------------------------------
        // Callback Name: check_safe_dis_cb
        // Following callback is associated with the "supportPillarToggleSafeDis" Styler item.
        // Input: eventObject - object of UIStyler.StylerEvent class
        //------------------------------------------------------------------------------
        public NXOpen.UIStyler.DialogState check_safe_dis_cb(NXOpen.UIStyler.StylerEvent eventObject)
        {
            try
            {
                int supportPillarParaRow = supportPillarSupplierRow + supportPillarOptionSafeDis.ItemValue;
                supportPillarStrAvoidDiam.ItemValue = GetExcelForParaAndRow(sheet, supportPillarParaRow, "直径单边避空", supportPillarParaTittleRow);
                // ---- Enter your callback code here -----


            }
            catch (NXOpen.NXException ex)
            {
                // ---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
            }
            // Callback acknowledged, do not terminate dialog
            return NXOpen.UIStyler.DialogState.ContinueDialog;
            // or Callback acknowledged, terminate dialog.
            // return NXOpen.UIStyler.DialogState.ExitDialog;
        }

        //------------------------------------------------------------------------------
        // Callback Name: check_set_plate_transp_cb
        // Following callback is associated with the "supportPillarToggleSetPlateTransp" Styler item.
        // Input: eventObject - object of UIStyler.StylerEvent class
        //------------------------------------------------------------------------------
        public NXOpen.UIStyler.DialogState check_set_plate_transp_cb(NXOpen.UIStyler.StylerEvent eventObject)
        {
            try
            {


                // ---- Enter your callback code here -----


            }
            catch (NXOpen.NXException ex)
            {
                // ---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
            }
            // Callback acknowledged, do not terminate dialog
            return NXOpen.UIStyler.DialogState.ContinueDialog;
            // or Callback acknowledged, terminate dialog.
            // return NXOpen.UIStyler.DialogState.ExitDialog;
        }

        //------------------------------------------------------------------------------
        // Callback Name: int_set_plate_transp_cb
        // Following callback is associated with the "supportPillarIntSetPlateTransp" Styler item.
        // Input: eventObject - object of UIStyler.StylerEvent class
        //------------------------------------------------------------------------------
        public NXOpen.UIStyler.DialogState int_set_plate_transp_cb(NXOpen.UIStyler.StylerEvent eventObject)
        {
            try
            {


                // ---- Enter your callback code here -----


            }
            catch (NXOpen.NXException ex)
            {
                // ---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
            }
            // Callback acknowledged, do not terminate dialog
            return NXOpen.UIStyler.DialogState.ContinueDialog;
            // or Callback acknowledged, terminate dialog.
            // return NXOpen.UIStyler.DialogState.ExitDialog;
        }

        //------------------------------------------------------------------------------
        // Callback Name: radio_screw_type_cb
        // Following callback is associated with the "supportPillarRadioScrewStandard" Styler item.
        // Input: eventObject - object of UIStyler.StylerEvent class
        //------------------------------------------------------------------------------
        public NXOpen.UIStyler.DialogState radio_screw_type_cb(NXOpen.UIStyler.StylerEvent eventObject)
        {
            try
            {


                // ---- Enter your callback code here -----


            }
            catch (NXOpen.NXException ex)
            {
                // ---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
            }
            // Callback acknowledged, do not terminate dialog
            return NXOpen.UIStyler.DialogState.ContinueDialog;
            // or Callback acknowledged, terminate dialog.
            // return NXOpen.UIStyler.DialogState.ExitDialog;
        }

        //------------------------------------------------------------------------------
        // Callback Name: check_screw_color_cb
        // Following callback is associated with the "supportPillarToggleScrewColor" Styler item.
        // Input: eventObject - object of UIStyler.StylerEvent class
        //------------------------------------------------------------------------------
        public NXOpen.UIStyler.DialogState check_screw_color_cb(NXOpen.UIStyler.StylerEvent eventObject)
        {
            try
            {


                // ---- Enter your callback code here -----


            }
            catch (NXOpen.NXException ex)
            {
                // ---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
            }
            // Callback acknowledged, do not terminate dialog
            return NXOpen.UIStyler.DialogState.ContinueDialog;
            // or Callback acknowledged, terminate dialog.
            // return NXOpen.UIStyler.DialogState.ExitDialog;
        }

        //------------------------------------------------------------------------------
        // Callback Name: ctol_set_screw_color_cb
        // Following callback is associated with the "supportPillarCtolScrewColor" Styler item.
        // Input: eventObject - object of UIStyler.StylerEvent class
        //------------------------------------------------------------------------------
        public NXOpen.UIStyler.DialogState ctol_set_screw_color_cb(NXOpen.UIStyler.StylerEvent eventObject)
        {
            try
            {

                // ---- Enter your callback code here -----


            }
            catch (NXOpen.NXException ex)
            {
                // ---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
            }
            // Callback acknowledged, do not terminate dialog
            return NXOpen.UIStyler.DialogState.ContinueDialog;
            // or Callback acknowledged, terminate dialog.
            // return NXOpen.UIStyler.DialogState.ExitDialog;
        }

        //------------------------------------------------------------------------------
        // Callback Name: blo_num_act_cb
        // Following callback is associated with the "supportPillarBloNum" Styler item.
        // Input: eventObject - object of UIStyler.StylerEvent class
        //------------------------------------------------------------------------------
        public NXOpen.UIStyler.DialogState blo_num_act_cb(NXOpen.UIStyler.StylerEvent eventObject)//选择按钮
        {
            try
            {
                workpart.ModelingViews.WorkView.Orient(View.Canned.Top, View.ScaleAdjustment.Fit);//俯视图


                int supportPillarParaRow = supportPillarSupplierRow + supportPillarOptionSafeDis.ItemValue;
                paraDictorary["supportPillarDiameter"] = Double.Parse( supportPillarOptionSafeDis.GetItems()[supportPillarOptionSafeDis.ItemValue]);
                paraDictorary["supportPillarHeight"] = paraDictorary["BboardDownFaceZ"] - paraDictorary["BaseboardUpFaceZ"];
                paraDictorary["supportPillarAvoid"] = Double.Parse( supportPillarStrAvoidDiam.ItemValue);
                paraDictorary["supportPillarScrewDiameter"] =Double.Parse( GetExcelForParaAndRow(sheet,supportPillarParaRow, "螺丝规格",supportPillarParaTittleRow).Substring(1));
                paraDictorary["supportPillarChamfer"]= Double.Parse(GetExcelForParaAndRow(sheet, supportPillarParaRow, "C角", supportPillarParaTittleRow));

                int screwParaRow=0;
                for (int i = screwSupplierRowNum[0]; i < screwSupplierRowNum[1]; i++)
                {
                    if((screwSheet.GetRow(i).GetCell(1).StringCellValue) == GetExcelForParaAndRow(sheet, supportPillarParaRow, "螺丝规格", supportPillarParaTittleRow))
                    {
                        screwParaRow = i;
                    }
                }
                paraDictorary["screwUpCylinderDiameter"] = paraDictorary["supportPillarScrewDiameter"];
                paraDictorary["screwDownCylinderDiameter"] = double.Parse(GetExcelForParaAndRow(screwSheet, screwParaRow, "下圆柱直径", screwParaTittleRow));
                paraDictorary["screwDownCylinderHeight"] = double.Parse(GetExcelForParaAndRow(screwSheet, screwParaRow, "下圆柱高", screwParaTittleRow));
                paraDictorary["screwSexangleLength"] = double.Parse(GetExcelForParaAndRow(screwSheet, screwParaRow, "六边形长度", screwParaTittleRow));
                paraDictorary["screwSexangleHeight"] = double.Parse(GetExcelForParaAndRow(screwSheet, screwParaRow, "六边形拉伸高", screwParaTittleRow));
                paraDictorary["subDownCylinderHeight"] = double.Parse(GetExcelForParaAndRow(screwSheet, screwParaRow, "下圆柱假体高", screwParaTittleRow));
                paraDictorary["subDownCylinderDiameter"] = double.Parse(GetExcelForParaAndRow(screwSheet, screwParaRow, "下圆柱假体直径", screwParaTittleRow));
                paraDictorary["subUpCylinderDiameter"] = double.Parse(GetExcelForParaAndRow(screwSheet, screwParaRow, "上圆柱假体直径", screwParaTittleRow));


                string[] screwUpCylinderLengthArray = GetExcelForParaAndRow(screwSheet, screwParaRow, "长度", screwParaTittleRow).Split(',');
                double referLength = paraDictorary["BaseboardUpFaceZ"] - paraDictorary["BaseboardDownFaceZ"]- paraDictorary["subDownCylinderHeight"]+1.5* paraDictorary["screwUpCylinderDiameter"];
                for (int i=0;i<screwUpCylinderLengthArray.Length;i++)
                {
                   if(Double.Parse( screwUpCylinderLengthArray[i])>=referLength)
                    {
                        paraDictorary["screwUpCylinderHeight"] = Double.Parse(screwUpCylinderLengthArray[i]);
                        break;
                    }
                }
                string message = "test";
                double[] screen_pt = {0,0,0 };
                Tag view_tag = Tag.Null;
                int response;
                ufui.SpecifyScreenPosition(message,motion_cb,IntPtr.Zero,screen_pt,out view_tag,out response);

                if(response==UFConstants.UF_UI_PICK_RESPONSE)
                {
                    /*string msg = string.Format("You Pick Screen Point({0},{1},{2})",screen_pt[0],screen_pt[1],screen_pt[2]);
                    ufui.DisplayMessage(msg,0);
                    supportPillarSelPoint = new double[3] { screen_pt[0], screen_pt[1], screen_pt[2] };*/
                    double[] testee = { 0,0, paraDictorary["subDownCylinderHeight"] - paraDictorary["screwDownCylinderHeight"] };
                    double[] teste1 = {0,0, paraDictorary["BaseboardUpFaceZ"] };
                    double[] test2 = { 0, 0, 0 };
                    Tag supportPillarEnityBodyTag;
                    Tag screwEnityBodyTag;
                    CreateEnitySupportPillar(teste1, paraDictorary["supportPillarDiameter"], paraDictorary["supportPillarHeight"], paraDictorary["supportPillarScrewDiameter"], paraDictorary["supportPillarChamfer"], 
                    out supportPillarEnityBodyTag);
                    CreareEnityScrew(testee, paraDictorary["screwUpCylinderDiameter"], paraDictorary["screwUpCylinderHeight"], paraDictorary["screwDownCylinderDiameter"], paraDictorary["screwDownCylinderHeight"], paraDictorary["screwSexangleLength"], 
                        paraDictorary["screwSexangleHeight"],out screwEnityBodyTag);
                    CreateSubtract(test2, paraDictorary["subDownCylinderDiameter"], paraDictorary["subDownCylinderHeight"], paraDictorary["screwUpCylinderDiameter"]+1, paraDictorary["BaseboardUpFaceZ"] - paraDictorary["BaseboardDownFaceZ"]- paraDictorary["subDownCylinderHeight"],
                        paraDictorary["supportPillarDiameter"]+2* paraDictorary["supportPillarAvoid"], paraDictorary["supportPillarHeight"]);

                    theufsession.Obj.DeleteObject(arc.Tag);
                    arc = null;
                }
                // ---- Enter your callback code here -----
                

            }
            catch (NXOpen.NXException ex)
            {
                // ---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
            }
            // Callback acknowledged, do not terminate dialog
            return NXOpen.UIStyler.DialogState.ContinueDialog;
            // or Callback acknowledged, terminate dialog.
            // return NXOpen.UIStyler.DialogState.ExitDialog;
        }
        //鼠标移动响应函数
        public void motion_cb(double[] screen_pos ,ref UFUi.MotionCbData motion_cb_data, IntPtr data)//鼠标的移动响应函数
        {
            // string msg1 = string.Format("Mouse at Point({0},{1},{2})", screen_pos[0], screen_pos[1], screen_pos[2]);
            if (arc==null)
            {
                Point3d point = new Point3d(screen_pos[0], screen_pos[1], screen_pos[2]);
                arc = workpart.Curves.CreateArc(point, vector_x, vector_y, 10, 0, 2 * Math.PI);

            }
            else
            {
                theufsession.Obj.DeleteObject(arc.Tag);
                Point3d point = new Point3d(screen_pos[0], screen_pos[1], screen_pos[2]);
                arc = workpart.Curves.CreateArc(point, vector_x, vector_y, 10, 0, 2 * Math.PI);
               // ufui.DisplayMessage(msg1, 0);
            }
        }

        //------------------------------------------------------------------------------
        // Callback Name: action_open_config_act_cb
        // Following callback is associated with the "supportPillarActionOpenConfig" Styler item.
        // Input: eventObject - object of UIStyler.StylerEvent class
        //------------------------------------------------------------------------------
        public NXOpen.UIStyler.DialogState action_open_config_act_cb(NXOpen.UIStyler.StylerEvent eventObject)
        {
            try
            {


                // ---- Enter your callback code here -----


            }
            catch (NXOpen.NXException ex)
            {
                // ---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
            }
            // Callback acknowledged, do not terminate dialog
            return NXOpen.UIStyler.DialogState.ContinueDialog;
            // or Callback acknowledged, terminate dialog.
            // return NXOpen.UIStyler.DialogState.ExitDialog;
        }

        /// <summary>
        /// 根据初始点，直径，高度，螺丝直径创建支撑住实体
        /// </summary>
        public void CreateEnitySupportPillar(double[] supportPillarPoint,double supportPillarDiameter,double supportPillarHeight,double supportPillarScrewDiameter,double supportPillarChamfer, out Tag supportPillarEnityBodyTag)//返回假体，用out;
        {
            double[] origin_zcz = supportPillarPoint;
            double[] vector_zcz = {0,0,1 };
            //大圆柱
            Tag cylinder1_zcz_tag;
            double[] cylinder1_zcz_origin = { origin_zcz[0], origin_zcz[1], origin_zcz[2] };
            string cylinder1_zcz_height = supportPillarHeight.ToString();//圆柱高
            string cylinder1_scz_diam = supportPillarDiameter.ToString();//圆柱直径
            double[] cylinder1_scz_direction = { vector_zcz[0], vector_zcz[1], vector_zcz[2] };
            ufmodel.CreateCylinder(FeatureSigns.Nullsign, Tag.Null, cylinder1_zcz_origin, cylinder1_zcz_height, cylinder1_scz_diam, cylinder1_scz_direction, out cylinder1_zcz_tag);
            NXOpen.Features.Cylinder cylinder1_zcz = NXObjectManager.Get(cylinder1_zcz_tag) as NXOpen.Features.Cylinder;
            //内部小圆柱
            Tag cylinder2_zcz_tag;
            double[] cylinder2_zcz_origin = { origin_zcz[0], origin_zcz[1], origin_zcz[2] };
            string cylinder2_zcz_height = (supportPillarScrewDiameter * 2.5).ToString();
            string cylinder2_zcz_diam = (supportPillarScrewDiameter - 1.5).ToString();
            double[] cylinder2_scz_direction = { vector_zcz[0], vector_zcz[1], vector_zcz[2] };
            ufmodel.CreateCyl1(FeatureSigns.Negative, cylinder2_zcz_origin, cylinder2_zcz_height, cylinder2_zcz_diam, cylinder2_scz_direction, out cylinder2_zcz_tag);
            NXOpen.Features.Cylinder cylinder2_zcz = NXObjectManager.Get(cylinder2_zcz_tag) as NXOpen.Features.Cylinder;
            //倒斜角
            Tag cylinder1chamfer1_zcz_tag;
            Tag cylinder1chamfer2_zcz_tag;
            Edge[] cylinder1edge_zcz;
            Tag[] cylinder1edge1_zcz = new Tag[2];
            Tag[] cylinder1edge2_zcz = new Tag[1];
            cylinder1edge_zcz = cylinder1_zcz.GetEdges();
            foreach (Edge item in cylinder1edge_zcz)
            {
                Point3d point11;
                Point3d point12;
                item.GetVertices(out point11, out point12);
                double s1_zcz = Math.Sqrt(Math.Pow(point11.X - origin_zcz[0], 2) + Math.Pow(point11.Y - origin_zcz[1], 2) + Math.Pow(point11.Z - origin_zcz[2], 2));
                double error = Math.Abs(s1_zcz - (double.Parse(cylinder1_scz_diam)) / 2);
                if (s1_zcz < (Double.Parse(cylinder2_zcz_diam) / 2 + 0.5))
                { cylinder1edge2_zcz[0] = item.Tag; }
                else if (error < 0.5)
                { cylinder1edge1_zcz[0] = item.Tag; }
                else if (s1_zcz > ((Double.Parse(cylinder1_scz_diam)) / 2 + 5))
                { cylinder1edge1_zcz[1] = item.Tag; }
            }
            string offset1_1 = supportPillarChamfer.ToString();
            string offset2_1 = "1";
            ufmodel.CreateChamfer(1, offset1_1, "0", "0", cylinder1edge1_zcz, out cylinder1chamfer1_zcz_tag);
            ufmodel.CreateChamfer(1, offset2_1, "0", "0", cylinder1edge2_zcz, out cylinder1chamfer2_zcz_tag);
            BodyFeature cylinder1chamfer1_zcz = (BodyFeature)NXObjectManager.Get(cylinder1chamfer1_zcz_tag);
            BodyFeature cylinder1chamfer2_zcz = (BodyFeature)NXObjectManager.Get(cylinder1chamfer2_zcz_tag);
       
            //锥角
            double[] cone_zcz_point = GetPointBy_ori_vec(origin_zcz, Double.Parse(cylinder2_zcz_height), vector_zcz);
            Tag cone_zcz_tag;
            string[] cone_zcz_diam = { cylinder2_zcz_diam, "0" };
            double cone_zcz_height = Math.Tanh(Math.PI / 6) * (Double.Parse(cylinder2_zcz_diam) / 2);
            double[] cone_zcz_origin = { cone_zcz_point[0], cone_zcz_point[1], cone_zcz_point[2] };
            double[] cone_scz_direction = vector_zcz;
            ufmodel.CreateCone1(FeatureSigns.Negative, cone_zcz_origin, cone_zcz_height.ToString(), cone_zcz_diam, cone_scz_direction, out cone_zcz_tag);
            BodyFeature cone_zcz = (BodyFeature)NXObjectManager.Get(cone_zcz_tag);

            supportPillarEnityBodyTag = cylinder1_zcz.GetBodies()[0].Tag;
            RemoveBodyParams(cylinder1_zcz.GetBodies()[0]);//消参
        }

        /// <summary>
        /// 生成螺丝实体
        /// </summary>
        public void CreareEnityScrew(double[] screwPoint, double screwUpCylinderDiameter,double screwUpCylinderHeight,double screwDownCylinderDiameter,double screwDownCylinderHeight,double screwSexangleLength,double screwSexangleHeight, out Tag screwEnityBodyTag)
        {
            double[] origin_lz = screwPoint;
            double[] direction = { 0,0,1};
            
            //下圆柱
            Tag cylinder1_lz_tag;
            Tag cylinder1body_lz_tag;
            double[] cylinder1_lz_direction = direction;
            double[] cylinder1_lz_origin = origin_lz;
            string cylinder1_lz_hei = screwDownCylinderHeight.ToString();
            string cylinder1_lz_diam = screwDownCylinderDiameter.ToString();
            ufmodel.CreateCyl1(FeatureSigns.Nullsign, cylinder1_lz_origin, cylinder1_lz_hei, cylinder1_lz_diam, cylinder1_lz_direction, out cylinder1_lz_tag);
            ufmodel.AskFeatBody(cylinder1_lz_tag, out cylinder1body_lz_tag);
            NXOpen.Features.Cylinder cylinder1f_lz = NXObjectManager.Get(cylinder1_lz_tag) as NXOpen.Features.Cylinder;
            //上圆柱
            Tag cylinder2_lz_tag;
            double[] cylinder2_lz_point = GetPointBy_ori_vec(origin_lz, screwDownCylinderHeight, direction);
            double[] cylinder2_lz_direction = direction;
            double[] cylinder2_lz_origin = cylinder2_lz_point;
            string cylinder2_lz_hei = screwUpCylinderHeight.ToString();
            string cylinder2_lz_diam = screwUpCylinderDiameter.ToString();
            ufmodel.CreateCylinder(FeatureSigns.Positive, cylinder1body_lz_tag, cylinder2_lz_origin, cylinder2_lz_hei, cylinder2_lz_diam, cylinder2_lz_direction, out cylinder2_lz_tag);
            NXOpen.Features.Cylinder cylinder2f_lz = NXObjectManager.Get(cylinder2_lz_tag) as NXOpen.Features.Cylinder;
            //上倒斜角
            Tag cylinder2cham_lz_tag;
            string cylinder2cham_lz_offset1 = (screwUpCylinderDiameter * 0.1).ToString();
            Edge edge2_top = null;
            Tag[] edge2_top_tag = new Tag[1];
            Edge[] edge2 = cylinder2f_lz.GetEdges();
            foreach (Edge item in edge2)
            {
                Point3d point21;
                Point3d point22;
                item.GetVertices(out point21, out point22);
                double s2_r = Math.Sqrt(Math.Pow(point21.X - cylinder2_lz_origin[0], 2) + Math.Pow(point21.Y - cylinder2_lz_origin[1], 2) + Math.Pow(point21.Z - cylinder2_lz_origin[2], 2));
                double error = Math.Abs(s2_r - (double.Parse(cylinder2_lz_diam)) / 2);
                if (error > 0.5)
                { edge2_top = item; }
            }
            edge2_top_tag[0] = edge2_top.Tag;
            ufmodel.CreateChamfer(1, cylinder2cham_lz_offset1, "", "", edge2_top_tag, out cylinder2cham_lz_tag);
            BodyFeature cylinder2cham_lz = NXObjectManager.Get(cylinder2cham_lz_tag) as BodyFeature;
            //下倒圆
            Edge[] edge1_bottom = new Edge[1];
            Edge[] edge1 = cylinder1f_lz.GetEdges();
            Tag[] edge1_bottom_tag = new Tag[1];
            Tag edgeblend;
            foreach (Edge item in edge1)
            {
                Point3d point11;
                Point3d point12;
                item.GetVertices(out point11, out point12);
                double s1_r = Math.Sqrt(Math.Pow(point11.X - cylinder1_lz_origin[0], 2) + Math.Pow(point11.Y - cylinder1_lz_origin[1], 2) + Math.Pow(point11.Z - cylinder1_lz_origin[2], 2));
                double error = Math.Abs(s1_r - (double.Parse(cylinder1_lz_diam)) / 2);
                if (error < 1)
                {
                    edge1_bottom[0] = item;
                }
            }
            edge1_bottom_tag[0] = edge1_bottom[0].Tag;
            ufmodel.CreateBlend("1", edge1_bottom_tag, 0, 0, 0, 0.1, out edgeblend);
            EdgeBlend edge1_blend = (EdgeBlend)NXObjectManager.Get(edgeblend);

            //拉伸
            double radius_pol = screwSexangleLength / 2;
            double[] terminal1 = new double[3] { (radius_pol * Math.Sqrt(3) / 3), radius_pol, 0 };
            double[] terminal2 = new double[3] { (2 * radius_pol * Math.Sqrt(3) / 3), 0, 0 };
            double[] terminal3 = new double[3] { (radius_pol * Math.Sqrt(3) / 3), -radius_pol, 0 };
            double[] terminal4 = new double[3] { -(radius_pol * Math.Sqrt(3) / 3), -radius_pol, 0 };
            double[] terminal5 = new double[3] { -(2 * radius_pol * Math.Sqrt(3) / 3), 0, 0 };
            double[] terminal6 = new double[3] { -(radius_pol * Math.Sqrt(3) / 3), radius_pol, 0 };

            Vector3d vector3 = new Vector3d(0,0,1);
            double x1 = vector3.X;
            double y1 = vector3.Y;
            double z1 = vector3.Z;

            double x2;
            double y2;
            double z2;
            if (y1 == 0)
            {
                x2 = vector3.Z;
                y2 = 0;
                z2 = -vector3.X;
            }
            else
            {
                x2 = 0;
                y2 = vector3.Z;
                z2 = -vector3.Y;
            }

            double s2 = Math.Sqrt(Math.Pow(x2, 2) + Math.Pow(z2, 2) + Math.Pow(y2, 2));
            Vector3d vector2 = new Vector3d(x2 / s2, y2 / s2, z2 / s2);

            double x3 = y1 * z2 - z1 * y2;
            double y3 = z1 * x2 - z2 * x1;
            double z3 = x1 * y2 - x2 * y1;
            double s3 = Math.Sqrt(Math.Pow(x3, 2) + Math.Pow(y3, 2) + Math.Pow(z3, 2));
            Vector3d vector1 = new Vector3d(x3 / s3, y3 / s3, z3 / s3);

            Line[] lines = new Line[6];
            Tag[] lines_tag = new Tag[6];
            Point3d start1 = Trans_point(terminal1, origin_lz, vector1, vector2, vector3);
            Point3d end1 = Trans_point(terminal2, origin_lz, vector1, vector2, vector3);
            lines[0] = workpart.Curves.CreateLine(start1, end1);
            RemoveBodyParams(lines[0]);
            lines[0].SetVisibility(SmartObject.VisibilityOption.Invisible);
            lines_tag[0] = lines[0].Tag;

            Point3d start2 = lines[0].EndPoint;
            Point3d end2 = Trans_point(terminal3, origin_lz, vector1, vector2, vector3);
            lines[1] = workpart.Curves.CreateLine(start2, end2);
            RemoveBodyParams(lines[1]);
            lines[1].SetVisibility(SmartObject.VisibilityOption.Invisible);
            lines_tag[1] = lines[1].Tag;

            Point3d start3 = lines[1].EndPoint;
            Point3d end3 = Trans_point(terminal4, origin_lz, vector1, vector2, vector3);
            lines[2] = workpart.Curves.CreateLine(start3, end3);
            RemoveBodyParams(lines[2]);
            lines[2].SetVisibility(SmartObject.VisibilityOption.Invisible);
            lines_tag[2] = lines[2].Tag;

            Point3d start4 = lines[2].EndPoint;
            Point3d end4 = Trans_point(terminal5, origin_lz, vector1, vector2, vector3);
            lines[3] = workpart.Curves.CreateLine(start4, end4);
            RemoveBodyParams(lines[3]);
            lines[3].SetVisibility(SmartObject.VisibilityOption.Invisible);
            lines_tag[3] = lines[3].Tag;

            Point3d start5 = lines[3].EndPoint;
            Point3d end5 = Trans_point(terminal6, origin_lz, vector1, vector2, vector3);
            lines[4] = workpart.Curves.CreateLine(start5, end5);
            RemoveBodyParams(lines[4]);
            lines[4].SetVisibility(SmartObject.VisibilityOption.Invisible);
            lines_tag[4] = lines[4].Tag;

            Point3d start6 = lines[4].EndPoint;
            Point3d end6 = lines[0].StartPoint;
            lines[5] = workpart.Curves.CreateLine(start6, end6);
            RemoveBodyParams(lines[5]);
            lines[5].SetVisibility(SmartObject.VisibilityOption.Invisible);
            lines_tag[5] = lines[5].Tag;

            string[] limit = { "0", screwSexangleHeight.ToString() };
            double[] point = { 0, 0, 0 };
            double[] dire = direction;
            Tag[] extrude_1;
            ufmodel.CreateExtruded2(lines_tag, "0", limit, point, dire, FeatureSigns.Negative, out extrude_1);
            BodyFeature extrude2 = (BodyFeature)NXObjectManager.Get(extrude_1[0]);
            screwEnityBodyTag = cylinder2f_lz.GetBodies()[0].Tag;
            RemoveBodyParams(cylinder2f_lz.GetBodies()[0]);//消参

        }

        public void CreateSubtract(double[] subtractPoint,double subDownCylinderDiameter, double subDownCylinderHeight, double subMidCylinderDiameter,double subMidCylinderHeight, double subUpCylinderDiameter, double subUpCylinderHeight)
        {
            double[] vector_fal = { 0, 0, 1 };
            double[] origin_fal = subtractPoint;

            //螺柱假体
            //底部圆柱
            Tag cylinder2_fal_tag;
            Tag cylinder2body_fal_tag;
            double[] cylinder2_fal_origin = origin_fal;
            double[] cylinder2_fal_direction = vector_fal;
            string cylinder2_fal_diam = (subDownCylinderDiameter).ToString();
            string cylinder2_fal_hei = (subDownCylinderHeight).ToString();
            ufmodel.CreateCylinder(FeatureSigns.Nullsign, Tag.Null, cylinder2_fal_origin, cylinder2_fal_hei, cylinder2_fal_diam, cylinder2_fal_direction, out cylinder2_fal_tag);
            ufmodel.AskFeatBody(cylinder2_fal_tag, out cylinder2body_fal_tag);
            //中间圆柱
            Tag cylinder1_fal_tag;
            double[] cylinder1_fal_origin = GetPointBy_ori_vec(origin_fal, subDownCylinderHeight,vector_fal);
            double[] cylinder1_fal_direction = vector_fal;
            string cylinder1_fal_diam = (subMidCylinderDiameter).ToString();
            string cylinder1_fal_hei = (subMidCylinderHeight).ToString();
            ufmodel.CreateCylinder(FeatureSigns.Positive, cylinder2body_fal_tag, cylinder1_fal_origin, cylinder1_fal_hei, cylinder1_fal_diam, cylinder1_fal_direction, out cylinder1_fal_tag);
            

            //支撑柱假体
            Tag cylinder3_fal_tag;
            double[] cylinder3_fal_origin = GetPointBy_ori_vec(origin_fal, subMidCylinderHeight,vector_fal);
            double[] cylinder3_fal_direction = vector_fal;
            string cylinder3_fal_diam = (subUpCylinderDiameter).ToString();
            string cylinder3_fal_hei = subUpCylinderHeight.ToString();
            ufmodel.CreateCylinder(FeatureSigns.Positive, cylinder2body_fal_tag, cylinder3_fal_origin, cylinder3_fal_hei, cylinder3_fal_diam, cylinder3_fal_direction, out cylinder3_fal_tag);
        }

        public Point3d Trans_point(double[] point, double[] origin, Vector3d Vector_x, Vector3d Vector_y, Vector3d Vector_z)
        {
            double x = Vector_x.X * point[0] + Vector_y.X * point[1] + Vector_z.X * point[2] + origin[0];
            double y = Vector_x.Y * point[0] + Vector_y.Y * point[1] + Vector_z.Y * point[2] + origin[1];
            double z = Vector_x.Z * point[0] + Vector_y.Z * point[1] + Vector_z.Z * point[2] + origin[2];
            Point3d point_result;
            point_result = new Point3d(x, y, z);
            return point_result;
        }

        /// <summary>
        /// 减去文件名，以及相应的文件夹名
        /// </summary>
        public static string GetExcelFilePath(string fileName)
        {
            int filelength;
            string currentDllDirectory = System.AppDomain.CurrentDomain.BaseDirectory;
            filelength = currentDllDirectory.Length;
            string currentAppDirectory = currentDllDirectory.Substring(0, filelength - 12);
            string currentDataPath = Path.Combine(currentAppDirectory, @"exceldata\");
            string excelFilePath = Path.Combine(currentDataPath, fileName);
            return excelFilePath;
        }

        /// <summary>
        /// 获取相应名称下特定名字的excel sheet表
        /// </summary>
        public static ISheet GetExcelSheet(string fileName, string sheetName)
        {
            IWorkbook workbook = null;
            ISheet sheet = null;
            
            string excelFilePath = GetExcelFilePath(fileName);
            FileStream fs = null;
            fs = new FileStream(excelFilePath, FileMode.Open, FileAccess.Read);
            if (fileName.IndexOf(".xlsx") > 0) // 2007版本
                workbook = new XSSFWorkbook(fs);
            else if (fileName.IndexOf(".xls") > 0) // 2003版本
                workbook = new HSSFWorkbook(fs);
            sheet = workbook.GetSheet(sheetName);
            return sheet;
        }

        /// <summary>
        /// 排除空格选取相应值
        /// </summary>
        public static string GetExcelForParaAndRow(ISheet isheet, int rowNum, string paraTittle, int paraTittleRowIndex)
        {
            int volumn = -1;
            string paraValue = string.Empty;
            IRow row = isheet.GetRow(paraTittleRowIndex);
            while (paraValue != paraTittle)
            {
                volumn++;
                paraValue = row.GetCell(volumn).StringCellValue;
            }
            paraValue = isheet.GetRow(rowNum).GetCell(volumn).StringCellValue;
            while (paraValue == "")
            {
                if (rowNum == (paraTittleRowIndex + 2)) break;
                rowNum--;
                paraValue = isheet.GetRow(rowNum).GetCell(volumn).StringCellValue;
            }
            return paraValue;
        }

        /// <summary>
        /// 由同一向量上的点获取特定距离的点
        /// </summary>
        public double[] GetPointBy_ori_vec(double[] origin, double distance, double[] vector)
        {
            double[] point_result=new double[3];
            double[] unit_vector = Unit_vector(vector);
            point_result[0] = origin[0] + distance * unit_vector[0];
            point_result[1] = origin[1] + distance * unit_vector[1];
            point_result[2] = origin[2] + distance * unit_vector[2];
            return point_result;
        }

        /// <summary>
        /// 获取单位向量
        /// </summary>
        public double[] Unit_vector(double[] vector111)
        {
            double s;
            double[] vector_result=new double[3];
            s = Math.Sqrt(Math.Pow(vector111[0], 2) + Math.Pow(vector111[1], 2) + Math.Pow(vector111[2], 2));
            vector_result[0] = vector111[0] / s;
            vector_result[1] = vector111[1] / s;
            vector_result[2] = vector111[2] / s;
            return vector_result;
        }

        /// <summary>
        /// 移除参数
        /// </summary>
        public static void RemoveBodyParams(NXObject nxObject)
        {
            try
            {
                Session theSession = Session.GetSession();
                Part workPart = theSession.Parts.Work;
                Part displayPart = theSession.Parts.Display;
                // ----------------------------------------------
                //   Menu: Edit->Feature->Remove Parameters...
                // ----------------------------------------------
                RemoveParametersBuilder removeParametersBuilder1;
                removeParametersBuilder1 = workPart.Features.CreateRemoveParametersBuilder();

                bool added = removeParametersBuilder1.Objects.Add(nxObject);

                NXObject nXObject1;
                nXObject1 = removeParametersBuilder1.Commit();

                removeParametersBuilder1.Destroy();
            }
            catch (Exception ex)
            {
                throw new Exception("移除参数错误,请仔细检查要移除参数的对象!", ex);
            }
        }
    }


}


